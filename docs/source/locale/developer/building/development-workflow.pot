# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2021, test
# This file is distributed under the same license as the qubes-docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: qubes-docs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-12-15 21:10+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../developer/building/development-workflow.md:13
#: 706d8988269646df975a5f1fc19e1221
msgid "A workflow for developing Qubes OS+"
msgstr ""

#: ../developer/building/development-workflow.md:15
#: e1e1e8d255614a37afd7eee3f251503a
msgid "First things first, setup [QubesBuilder](/doc/qubes-builder/). This guide assumes you're using qubes-builder to build Qubes."
msgstr ""

#: ../developer/building/development-workflow.md:18
#: a55326e49b5943a89a0c1f45468fe330
msgid "Repositories and committing Code"
msgstr ""

#: ../developer/building/development-workflow.md:20
#: 102fb14c9e31435cbd083623fdaee753
msgid "Qubes is split into a bunch of git repos. These are all contained in the `qubes-src` directory under qubes-builder. Subdirectories there are separate components, stored in separate git repositories."
msgstr ""

#: ../developer/building/development-workflow.md:24
#: 6557ad3c9dbd45c884e042db589a453b
msgid "The best way to write and contribute code is to create a git repo somewhere (e.g., github) for the repo you are interested in editing (e.g., `qubes-manager`, `core-agent-linux`, etc). To integrate your repo with the rest of Qubes, cd to the repo directory and add your repository as a remote in git"
msgstr ""

#: ../developer/building/development-workflow.md:29
#: 632e107661af49f9855b4f9208857c0e
msgid "**Example:**"
msgstr ""

#: ../developer/building/development-workflow.md:36
#: 2b5a0855c4e14e7f9b5232f84a794ede
msgid "You can then proceed to easily develop in your own branches, pull in new commits from the dev branches, merge them, and eventually push to your own repo on github."
msgstr ""

#: ../developer/building/development-workflow.md:40
#: 94853783ae914b8d83475499deb2c019
msgid "When you are ready to submit your changes to Qubes to be merged, push your changes, then create a signed git tag (using `git tag -s`). Finally, send a letter to the Qubes listserv describing the changes and including the link to your repository. You can also create pull request on github. Don't forget to include your public PGP key you use to sign your tags."
msgstr ""

#: ../developer/building/development-workflow.md:46
#: 6d3692cfe3f14b018b4f2fcc9b477d48
msgid "Kernel-specific notes"
msgstr ""

#: ../developer/building/development-workflow.md:48
#: 6e90db7e98b242c3bfe9b550f6225178
msgid "Prepare fresh version of kernel sources, with Qubes-specific patches applied"
msgstr ""

#: ../developer/building/development-workflow.md:50
#: ../developer/building/development-workflow.md:69
#: c523e97b6f724e6d833218120ed3fa0a
#: 9cb7e45b47804c57b42ccdf9c781ab0f
msgid "In qubes-builder/qubes-src/linux-kernel:"
msgstr ""

#: ../developer/building/development-workflow.md:56
#: 5a751126e2ed4bd8a5061d2152490f0e
msgid "The resulting tree will be in kernel-\\<VERSION\\>/linux-\\<VERSION\\>:"
msgstr ""

#: ../developer/building/development-workflow.md:67
#: b71b4ecab6d14d0fbedb626c98a5c74a
msgid "Go to the kernel tree and update the version"
msgstr ""

#: ../developer/building/development-workflow.md:75
#: adbb07354ce349c28dc6383b54487bf2
msgid "Changing the config"
msgstr ""

#: ../developer/building/development-workflow.md:77
#: e0381faa055e4d878bcc685d7029ee5f
msgid "In kernel-3.4.18/linux-3.4.18:"
msgstr ""

#: ../developer/building/development-workflow.md:84
#: 50f97d5e0c444beeb1f4066c50121d52
msgid "Now change the configuration. For example, in kernel-3.4.18/linux-3.4.18:"
msgstr ""

#: ../developer/building/development-workflow.md:90
#: 03dac9b836da49f7a337f4a461df0c3d
msgid "Copy the modified config back into the kernel tree:"
msgstr ""

#: ../developer/building/development-workflow.md:96
#: 1b46641585a44729a513783dec95622c
msgid "Patching the code"
msgstr ""

#: ../developer/building/development-workflow.md:98
#: 327bc842efc24ed4bcd3618ca6211997
msgid "TODO: describe the workflow for patching the code, below are some random notes, not working well"
msgstr ""

#: ../developer/building/development-workflow.md:118
#: 709e0bf5fa4945bcbd4e1167469ca66b
msgid "Building RPMs"
msgstr ""

#: ../developer/building/development-workflow.md:120
#: 80d9f3b3ee3a4908a56b2360593d08bf
msgid "TODO: Is this step generic for all subsystems?"
msgstr ""

#: ../developer/building/development-workflow.md:122
#: cd01766f8f6940e8884a5ed3166faf34
msgid "Now it is a good moment to make sure you have changed kernel release name in rel file. For example, if you change it to '1debug201211116c' the resulting RPMs will be named 'kernel-3.4.18-1debug20121116c.pvops.qubes.x86\\_64.rpm'. This will help distinguish between different versions of the same package."
msgstr ""

#: ../developer/building/development-workflow.md:128
#: c1578d86d690496ab2c7555df88ebd87
msgid "You might want to take a moment here to review (git diff, git status), commit your changes locally."
msgstr ""

#: ../developer/building/development-workflow.md:131
#: 97bf393b7d4e4df894bba1acebe9209b
msgid "To actually build RPMs, in qubes-builder:"
msgstr ""

#: ../developer/building/development-workflow.md:137
#: 951495a97e824e34baefdd253a5840bf
msgid "RPMs will appear in qubes-src/linux-kernel/pkgs/fc20/x86\\_64:"
msgstr ""

#: ../developer/building/development-workflow.md:148
#: a1c8a2d0219a4d83ad46e02b0cc59084
msgid "Useful [QubesBuilder](/doc/qubes-builder/) commands"
msgstr ""

#: ../developer/building/development-workflow.md:150
#: f27de899e1e04bf99989382ec1dbc98a
msgid "`make check` - will check if all the code was committed into repository and if all repository are tagged with signed tag."
msgstr ""

#: ../developer/building/development-workflow.md:152
#: 274e2b29b724402b88cba657ded5189f
msgid "`make show-vtags` - show version of each component (based on git tags) - mostly useful just before building ISO. **Note:** this will not show version for components containing changes since last version tag."
msgstr ""

#: ../developer/building/development-workflow.md:155
#: b9c64b07503d4fa68df50a284aaeb2bc
msgid "`make push` - push change from **all** repositories to git server. You must set proper remotes (see above) for all repositories first."
msgstr ""

#: ../developer/building/development-workflow.md:157
#: d469eb6e19504682af6819284d7d0ada
msgid "`make prepare-merge` - fetch changes from remote repositories (can be specified on commandline via GIT\\_SUBDIR or GIT\\_REMOTE vars), (optionally) verify tags and show the changes. This do not merge the changes - there are left for review as FETCH\\_HEAD ref. You can merge them using `git merge FETCH_HEAD` (in each repo directory). Or `make do-merge` to merge all of them."
msgstr ""

#: ../developer/building/development-workflow.md:163
#: 40ceee5987e64055b599c07a9e5ecce6
msgid "Copying Code to dom0"
msgstr ""

#: ../developer/building/development-workflow.md:165
#: a593e5c96b164871bbfe3f6267b18121
msgid "When developing it is convenient to be able to rapidly test changes. Assuming you're developing Qubes on Qubes, you should be working in a special VM for Qubes and occasionally you will want to transfer code or RPMs back to dom0 for testing."
msgstr ""

#: ../developer/building/development-workflow.md:170
#: e343624220804ed8b8d2ba0bc396fa9c
msgid "Here are some handy scripts Marek has shared to facilitate this."
msgstr ""

#: ../developer/building/development-workflow.md:172
#: cf4f1e25fbcc4dd6a3069beee3cf1dc1
msgid "You may also like to run your [test environment on separate machine](/doc/test-bench/)."
msgstr ""

#: ../developer/building/development-workflow.md:175
#: 8caad1c6b9c9472bbea9cbd46bb84fcc
msgid "Syncing dom0 files"
msgstr ""

#: ../developer/building/development-workflow.md:177
#: fe029efd92df4c418a4cd2c6a64dd8a7
msgid "TODO: edit this script to be more generic"
msgstr ""

#: ../developer/building/development-workflow.md:204
#: b28f80051c3d4d649d078fe3589390ad
msgid "Apply qvm-tools"
msgstr ""

#: ../developer/building/development-workflow.md:206
#: 9713051394764775a34b25aefcfc8cb7
msgid "TODO: make it more generic"
msgstr ""

#: ../developer/building/development-workflow.md:217
#: 975939c3c47e48ea82ad25ca8688278b
msgid "Copy from dom0 to an appvm"
msgstr ""

#: ../developer/building/development-workflow.md:232
#: 599371681acc499f952144f03c1b3ab9
msgid "Git connection between VMs"
msgstr ""

#: ../developer/building/development-workflow.md:234
#: 05346793f3b948639cc0612b77053e18
msgid "Sometimes it's useful to transfer git commits between VMs. You can use `git format-patch` for that and simply copy the files. But you can also setup custom qrexec service for it."
msgstr ""

#: ../developer/building/development-workflow.md:238
#: 510a3c4b3c854c4b952e22f0bd2ca0eb
msgid "Below example assumes that you use `builder-RX` directory in target VM to store sources in qubes-builder layout (where `X` is some number). Make sure that all the scripts are executable."
msgstr ""

#: ../developer/building/development-workflow.md:242
#: 150b465787b147029f9268ca782d45cd
msgid "Service file (save in `/usr/local/etc/qubes-rpc/local.Git` in target VM):"
msgstr ""

#: ../developer/building/development-workflow.md:269
#: fd88de6ac7054c248d5b26580380ecdd
msgid "Client script (save in `~/bin/git-qrexec` in source VM):"
msgstr ""

#: ../developer/building/development-workflow.md:279
#: 11626fce7a414ba9ae094b5f00def7c3
msgid "You will also need to setup qrexec policy in dom0 (`/etc/qubes-rpc/policy/local.Git`)."
msgstr ""

#: ../developer/building/development-workflow.md:281
#: 21c094b1536f4dd491e78c28d6b39623
msgid "Usage:"
msgstr ""

#: ../developer/building/development-workflow.md:288
#: 583cd73cb0844deab6371bfc31e3c488
msgid "You can create `~/bin/add-remote` script to ease adding remotes:"
msgstr ""

#: ../developer/building/development-workflow.md:303
#: 73d3fbd35ff74b16b5e4317207d4289f
msgid "It should be executed from component top level directory. This script takes one argument - remote name. If it is `tb`, then it creates qrexec-based git remote to `testbuilder` VM. Otherwise it creates remote pointing at github account of the same name. In any case it points at repository matching current directory name."
msgstr ""

#: ../developer/building/development-workflow.md:309
#: f150521fd01542b2a40fed330d9ee358
msgid "Sending packages to different VM"
msgstr ""

#: ../developer/building/development-workflow.md:311
#: 262ce86098da4d5a97bc48073338f79a
msgid "Other useful script(s) can be used to setup local package repository hosted in some VM. This way you can keep your development VM behind firewall, while having an option to expose some yum/apt repository to the local network (to have them installed on test machine)."
msgstr ""

#: ../developer/building/development-workflow.md:316
#: e3028670d9684eea920875897874b032
msgid "To achieve this goal, a dummy repository can be created, which instead of populating metadata locally, will upload the packages to some other VM and trigger repository update there (using qrexec). You can use `unstable` repository flavor, because there is no release managing rules bundled (unlike current and current-testing)."
msgstr ""

#: ../developer/building/development-workflow.md:322
#: d6aa17fa51cf4e2ab7d148c4ecfb8251
msgid "RPM packages - yum repo"
msgstr ""

#: ../developer/building/development-workflow.md:324
#: 0af271d01e424aa0b617adeba67bad6f
msgid "In source VM, grab [linux-yum](https://github.com/QubesOS/qubes-linux-yum) repository (below is assumed you've made it in `~/repo-yum-upload` directory) and replace `update_repo.sh` script with:"
msgstr ""

#: ../developer/building/development-workflow.md:340
#: bef46c272fdc4a0bb8652a69eeeeb18d
msgid "In target VM, setup actual yum repository (also based on [linux-yum](https://github.com/QubesOS/qubes-linux-yum), this time without modifications). You will also need to setup some gpg key for signing packages (it is possible to force yum to install unsigned packages, but it isn't possible for `qubes-dom0-update` tool). Fill `~/.rpmmacros` with key description:"
msgstr ""

#: ../developer/building/development-workflow.md:350
#: ec5054d705c240e581e22f025f03e783
msgid "Then setup `local.UpdateYum` qrexec service (`/usr/local/etc/qubes-rpc/local.UpdateYum`):"
msgstr ""

#: ../developer/building/development-workflow.md:382
#: 992717d4a3304024a60f39bc14b9fd7b
msgid "Of course you will also need to setup qrexec policy in dom0 `/etc/qubes-rpc/policy/local.UpdateYum`."
msgstr ""

#: ../developer/building/development-workflow.md:385
#: 8910ea3ce89e4ababd4436aff84296bf
msgid "If you want to access the repository from network, you need to setup HTTP server serving it, and configure the system to let other machines actually reach this HTTP server. You can use for example using [port forwarding](/doc/firewall/#port-forwarding-to-a-qube-from-the-outside-world) or setting up Tor hidden service. Configuration details of those services are outside of the scope of this page."
msgstr ""

#: ../developer/building/development-workflow.md:391
#: 2a427605e93e4de1ab2f925cb09c63ea
msgid "Usage: setup `builder.conf` in source VM to use your dummy-uploader repository:"
msgstr ""

#: ../developer/building/development-workflow.md:397
#: 5160d35f250e4d2b9f6d9e135ad3fb9d
msgid "Then use `make update-repo-unstable` to upload the packages. You can also specify selected components on command line, then build them and upload to the repository:"
msgstr ""

#: ../developer/building/development-workflow.md:405
#: d914cd2134c1456f9a4eb61a46b5658f
msgid "On the test machine, add yum repository (`/etc/yum.repos.d`) pointing at just configured HTTP server. For example:"
msgstr ""

#: ../developer/building/development-workflow.md:414
#: e65119945bb5490cb9f81ebea7999542
msgid "Remember to also import gpg public key using `rpm --import`."
msgstr ""

#: ../developer/building/development-workflow.md:416
#: 3ee17687c3a749ebb1064b82da2f4e63
msgid "Deb packages - Apt repo"
msgstr ""

#: ../developer/building/development-workflow.md:418
#: 0f79202124b44e29a551e89278c7196c
msgid "Steps are mostly the same as in the case of yum repo. The only details that differ:"
msgstr ""

#: ../developer/building/development-workflow.md:420
#: 6f2e54cc697148c797db7e80a1c50c52
msgid "use [linux-deb](https://github.com/QubesOS/qubes-linux-deb) instead of [linux-yum](https://github.com/QubesOS/qubes-linux-yum) as a base - both in source and target VM"
msgstr ""

#: ../developer/building/development-workflow.md:421
#: 357fc8fd14cf45aeb71a44ea6a2b088d
msgid "use different `update_repo.sh` script in source VM (below)"
msgstr ""

#: ../developer/building/development-workflow.md:422
#: a6fec05d62344a648798151e10e31d81
msgid "use `local.UpdateApt` qrexec service in target VM (code below)"
msgstr ""

#: ../developer/building/development-workflow.md:423
#: f27f75c798c34492975e94b58b106f10
msgid "in target VM additionally place `update-local-repo.sh` script in repository dir (code below)"
msgstr ""

#: ../developer/building/development-workflow.md:425
#: 861874277b954627922cb69f267c7151
msgid "`update_repo.sh` script:"
msgstr ""

#: ../developer/building/development-workflow.md:441
#: 0791423b9b29442f8f21147a3aa78af6
msgid "`local.UpdateApt` service code (`/usr/local/etc/qubes-rpc/local.UpdateApt` in repo-serving VM):"
msgstr ""

#: ../developer/building/development-workflow.md:476
#: 94cbca4e5631453a8c609353e083e518
msgid "`update-local-repo.sh`:"
msgstr ""

#: ../developer/building/development-workflow.md:534
#: cfe2466c4561476584eb97ce98edaa9b
msgid "Usage: add this line to `/etc/apt/sources.list` on test machine (adjust host and path):"
msgstr ""
