# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2021, test
# This file is distributed under the same license as the qubes-docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: qubes-docs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-12-15 21:10+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../developer/services/qrexec2.md:14
#: 64bfdae71e3344d8a9ae9ab3ec524a5f
msgid "(*This page is about qrexec v2. For qrexec v3, see [here](/doc/qrexec/).*)"
msgstr ""

#: ../developer/services/qrexec2.md:16
#: dbbf907b5f624abd9e160b545343d13a
msgid "Qubes **qrexec** is a framework for implementing inter-VM (incl. Dom0-VM) services. It offers a mechanism to start programs in VMs, redirect their stdin/stdout, and a policy framework to control this all."
msgstr ""

#: ../developer/services/qrexec2.md:20
#: 9ac129e3978944f9a41462c6847e1bc1
msgid "Qrexec basics"
msgstr ""

#: ../developer/services/qrexec2.md:22
#: e66dc044ad024789ad2756d16bb0d4b6
msgid "During each domain creation a process named `qrexec-daemon` is started in dom0, and a process named `qrexec-agent` is started in the VM. They are connected over `vchan` channel."
msgstr ""

#: ../developer/services/qrexec2.md:26
#: 8c414254cbb54d6690e85a6bf64248df
msgid "Typically, the first thing that a `qrexec-client` instance does is to send a request to `qrexec-agent` to start a process in the VM. From then on, the stdin/stdout/stderr from this remote process will be passed to the `qrexec-client` process."
msgstr ""

#: ../developer/services/qrexec2.md:31
#: 1d502dba11f74ec8a364cb7f93ca5af7
msgid "E.g., to start a primitive shell in a VM type the following in Dom0 console:"
msgstr ""

#: ../developer/services/qrexec2.md:37
#: 09fea23935e9476aadbc3ad5c9ae70fd
msgid "The string before first semicolon specifies what user to run the command as."
msgstr ""

#: ../developer/services/qrexec2.md:39
#: db3972764d8d4d06b020ce35d3f1139a
msgid "Adding `-e` on the `qrexec-client` command line results in mere command execution (no data passing), and `qrexec-client` exits immediately after sending the execution request."
msgstr ""

#: ../developer/services/qrexec2.md:43
#: e1a0a7ecc4fc4b1497b952e12f3a2795
msgid "There is also the `-l <local program>` flag, which directs `qrexec-client` to pass stdin/stdout of the remote program not to its stdin/stdout, but to the (spawned for this purpose) `<local program>`."
msgstr ""

#: ../developer/services/qrexec2.md:47
#: ae45e76e9615449885e733dc6b19fb88
msgid "The `qvm-run` command is heavily based on `qrexec-client`. It also takes care of additional activities (e.g., starting the domain, if it is not up yet, and starting the GUI daemon). Thus, it is usually more convenient to use `qvm-run`."
msgstr ""

#: ../developer/services/qrexec2.md:51
#: 64d1570f65a1499f8d4236455b8e0a22
msgid "There can be almost arbitrary number of `qrexec-client` processes for a domain (i.e., `qrexec-client` processes connected to the same `qrexec-daemon`); their data is multiplexed independently."
msgstr ""

#: ../developer/services/qrexec2.md:55
#: 2f8fb6d2f24944af85ffa29942a976b7
msgid "There is a similar command line utility available inside Linux AppVMs (note the `-vm` suffix): `qrexec-client-vm` that will be described in subsequent sections."
msgstr ""

#: ../developer/services/qrexec2.md:59
#: 698708b20a1f4cdfb1dc9bd51c51e333
msgid "Qubes RPC services"
msgstr ""

#: ../developer/services/qrexec2.md:61
#: a49af5238fb14f37b6e545dfc99cfa90
msgid "Apart from simple Dom0-\\>VM command executions, as discussed above, it is also useful to have more advanced infrastructure for controlled inter-VM RPC/services. This might be used for simple things like inter-VM file copy operations, as well as more complex tasks like starting a DispVM, and requesting it to do certain operations on a handed file(s)."
msgstr ""

#: ../developer/services/qrexec2.md:67
#: c360f54ab48949df9c4fc4eaac1366cd
msgid "Instead of implementing complex RPC-like mechanisms for inter-VM communication, Qubes takes a much simpler and pragmatic approach and aims to only provide simple *pipes* between the VMs, plus ability to request *pre-defined* programs (servers) to be started on the other end of such pipes, and a centralized policy (enforced by the `qrexec-policy` process running in dom0) which says which VMs can request what services from what VMs."
msgstr ""

#: ../developer/services/qrexec2.md:74
#: 4e2c59832882491ca858d5322564759a
msgid "Thanks to the framework and automatic stdin/stdout redirection, RPC programs are very simple; both the client and server just use their stdin/stdout to pass data. The framework does all the inner work to connect these file descriptors to each other via `qrexec-daemon` and `qrexec-agent`. Additionally, DispVMs are tightly integrated; RPC to a DispVM is a simple matter of using a magic `$dispvm` keyword as the target VM name."
msgstr ""

#: ../developer/services/qrexec2.md:81
#: aa5884cbae7f455ebe38022d7dcfd838
msgid "All services in Qubes are identified by a single string, which by convention takes a form of `qubes.ServiceName`. Each VM can provide handlers for each of the known services by providing a file in `/etc/qubes-rpc/` directory with the same name as the service it is supposed to handle. This file will then be executed by the qrexec service, if the dom0 policy allowed the service to be requested (see below). Typically, the files in `/etc/qubes-rpc/` contain just one line, which is a path to the specific binary that acts as a server for the incoming request, however they might also be the actual executable themselves. Qrexec framework is careful about connecting the stdin/stdout of the server process with the corresponding stdin/stdout of the requesting process in the requesting VM (see example Hello World service described below)."
msgstr ""

#: ../developer/services/qrexec2.md:93
#: ec337d96bd4b46468daf5b44379bf7b7
msgid "Qubes RPC administration"
msgstr ""

#: ../developer/services/qrexec2.md:95
#: 8ea8b8fd3a2b4ff3ba15b1b9e3ac8a23
msgid "Besides each VM needing to provide explicit programs to serve each supported service, the inter-VM service RPC is also governed by a central policy in Dom0."
msgstr ""

#: ../developer/services/qrexec2.md:98
#: 4aa0cda1930842b09f7f2dfd123f9145
msgid "In dom0, there is a bunch of files in `/etc/qubes-rpc/policy/` directory, whose names describe the available RPC actions; their content is the RPC access policy database. Some example of the default services in Qubes are:"
msgstr ""

#: ../developer/services/qrexec2.md:114
#: fb2f98063fa24e87939015f1165043bf
msgid "These files contain lines with the following format:"
msgstr ""

#: ../developer/services/qrexec2.md:120
#: c125498307124644bdaf642d35b32241
msgid "You can specify `srcvm` and `destvm` by name, or by one of `$anyvm`, `$dispvm`, `dom0` reserved keywords (note string `dom0` does not match the `$anyvm` pattern; all other names do). Only `$anyvm` keyword makes sense in the `srcvm` field (service calls from dom0 are currently always allowed, `$dispvm` means \"new VM created for this particular request\" - so it is never a source of request). Currently, there is no way to specify source VM by type, but this is planned for Qubes R3."
msgstr ""

#: ../developer/services/qrexec2.md:128
#: d19df20430be4d2f92f6c768b390cbc5
msgid "Whenever a RPC request for service named \"XYZ\" is received, the first line in `/etc/qubes-rpc/policy/XYZ` that matches the actual `srcvm`/`destvm` is consulted to determine whether to allow RPC, what user account the program should run in target VM under, and what VM to redirect the execution to. If the policy file does not exist, user is prompted to create one *manually*; if still there is no policy file after prompting, the action is denied."
msgstr ""

#: ../developer/services/qrexec2.md:135
#: ee149053298a4fa99b87626b666e631b
msgid "On the target VM, the `/etc/qubes-rpc/XYZ` must exist, containing the file name of the program that will be invoked."
msgstr ""

#: ../developer/services/qrexec2.md:138
#: b38d83aabc9444ecabd318d213c01df1
msgid "Requesting VM-VM (and VM-Dom0) services execution"
msgstr ""

#: ../developer/services/qrexec2.md:140
#: a97b78c11676459b9acd5d7ab37c7648
msgid "In a src VM, one should invoke the qrexec client via the following command:"
msgstr ""

#: ../developer/services/qrexec2.md:146
#: 0035befde5b6437c83952cf90418fdb8
msgid "Note that only stdin/stdout is passed between RPC server and client -- notably, no cmdline argument are passed."
msgstr ""

#: ../developer/services/qrexec2.md:149
#: b8e8a8d24d0344f2bbd2821e00683b49
msgid "The source VM name can be accessed in the server process via `QREXEC_REMOTE_DOMAIN` environment variable. (Note the source VM has *no* control over the name provided in this variable--the name of the VM is provided by dom0, and so is trusted.)"
msgstr ""

#: ../developer/services/qrexec2.md:154
#: ee7447b0f8ba4e4f81fe91f1360b6037
msgid "By default, stderr of client and server is logged to respective `/var/log/qubes/qrexec.XID` files, in each of the VM."
msgstr ""

#: ../developer/services/qrexec2.md:157
#: 1d668d97c8f84744bb5ffb46219fe38c
msgid "Be very careful when coding and adding a new RPC service! Any vulnerability in a RPC server can be fatal to security of the target VM!"
msgstr ""

#: ../developer/services/qrexec2.md:160
#: 19319e4df4e4465a8608fbb2c728ba85
msgid "If requesting VM-VM (and VM-Dom0) services execution *without cmdline helper*, connect directly to `/var/run/qubes/qrexec-agent-fdpass` socket as described [below](#all-the-pieces-together-at-work)."
msgstr ""

#: ../developer/services/qrexec2.md:164
#: cf5537067b13446bb024abd37577882a
msgid "Revoking \"Yes to All\" authorization"
msgstr ""

#: ../developer/services/qrexec2.md:166
#: c52774452ca24df98cfd732051bf90e9
msgid "Qubes RPC policy supports an \"ask\" action, that will prompt the user whether a given RPC call should be allowed. It is set as default for services such as inter-VM file copy. A prompt window launches in dom0, that gives the user option to click \"Yes to All\", which allows the action and adds a new entry to the policy file, which will unconditionally allow further calls for given (service, srcVM, dstVM) tuple."
msgstr ""

#: ../developer/services/qrexec2.md:173
#: 34aeec80030947c99d9004fd3a3906ee
msgid "In order to remove such authorization, issue this command from a Dom0 terminal (example below for `qubes.Filecopy` service):"
msgstr ""

#: ../developer/services/qrexec2.md:180
#: 331a2352c9114d84ad9f353469f1ea36
msgid "and then remove any line(s) ending in \"allow\" (before the first `##` comment) which are the \"Yes to All\" results."
msgstr ""

#: ../developer/services/qrexec2.md:183
#: c8120373f79f4165aa2abf4a8fb7052b
msgid "A user might also want to set their own policies in this section. This may mostly serve to prevent the user from mistakenly copying files or text from a trusted to untrusted domain, or vice-versa."
msgstr ""

#: ../developer/services/qrexec2.md:187
#: bcd523227d034e898025995edbf606d9
msgid "Qubes RPC \"Hello World\" service"
msgstr ""

#: ../developer/services/qrexec2.md:189
#: 175579ef95014e469df66b16804dc9fa
msgid "We will show the necessary files to create a simple RPC call that adds two integers on the target VM and returns back the result to the invoking VM."
msgstr ""

#: ../developer/services/qrexec2.md:192
#: 84db8ff65c894ac593cf888ca821ca9c
msgid "Client code on source VM (`/usr/bin/our_test_add_client`)"
msgstr ""

#: ../developer/services/qrexec2.md:200
#: 1ac2bb5e79f04ed591d8f15ee3562bd0
msgid "Server code on target VM (`/usr/bin/our_test_add_server`)"
msgstr ""

#: ../developer/services/qrexec2.md:208
#: 0075425cf0e74f9ca65f31da9bc0668e
msgid "Policy file in dom0 (`/etc/qubes-rpc/policy/test.Add`)"
msgstr ""

#: ../developer/services/qrexec2.md:214
#: 685cfc2eaf714dc4892654320d480752
msgid "Server path definition on target VM (`/etc/qubes-rpc/test.Add`)"
msgstr ""

#: ../developer/services/qrexec2.md:220
#: 4ce016697b0b4811bb1364eeb14834a4
msgid "To test this service, run the following in the source VM:"
msgstr ""

#: ../developer/services/qrexec2.md:226
#: f92e48443ee04520b698860dc765c8b0
msgid "and we should get \"3\" as answer, provided dom0 policy allows the call to pass through, which would happen after we click \"Yes\" in the popup that should appear after the invocation of this command. If we changed the policy from \"ask\" to \"allow\", then no popup should be presented, and the call will always be allowed."
msgstr ""

#: ../developer/services/qrexec2.md:232
#: 375e3fff29c046b4a2626aefa10d04a7
msgid "**Note:** For a real world example of writing a qrexec service, see this [blog post](https://blog.invisiblethings.org/2013/02/21/converting-untrusted-pdfs-into-trusted.html)."
msgstr ""

#: ../developer/services/qrexec2.md:235
#: d3b42ed428f14320b15c7b3b370b379e
msgid "More high-level RPCs?"
msgstr ""

#: ../developer/services/qrexec2.md:237
#: f616dcafbe074016a0e38769b1b3d0f9
msgid "As previously noted, Qubes aims to provide mechanisms that are very simple and thus with very small attack surface. This is the reason why the inter-VM RPC framework is very primitive and doesn't include any serialization or other function arguments passing, etc. We should remember, however, that users/app developers are always free to run more high-level RPC protocols on top of qrexec. Care should be taken, however, to consider potential attack surfaces that are exposed to untrusted or less trusted VMs in that case."
msgstr ""

#: ../developer/services/qrexec2.md:245
#: 3f981eca73f14135ae9e2b63a25ae9ac
msgid "Qubes RPC internals"
msgstr ""

#: ../developer/services/qrexec2.md:247
#: 99e43e611a1443fab98ae0258ee75fb5
msgid "(*This is about the implementation of qrexec v2. For the implementation of qrexec v3, see [here](/doc/qrexec-internals/). Note that the user API in v3 is backward compatible: qrexec apps written for Qubes R2 should run without modification on Qubes R3.*)"
msgstr ""

#: ../developer/services/qrexec2.md:252
#: 323cdfd04edc4f0e9b0181498f056485
msgid "Dom0 tools implementation"
msgstr ""

#: ../developer/services/qrexec2.md:254
#: ../developer/services/qrexec2.md:267
#: 7095067df3724ab2b3043d5a455ecb49
#: 4fefc3fea9a14310a25699380cce8c9d
msgid "Players:"
msgstr ""

#: ../developer/services/qrexec2.md:256
#: 82dcaee3d3634b02afa7eb40aba2bc98
msgid "`/usr/lib/qubes/qrexec-daemon`: started by mgmt stack (qubes.py) when a VM is started."
msgstr ""

#: ../developer/services/qrexec2.md:258
#: 44f445c1073b440fa260d2afd890e62f
msgid "`/usr/lib/qubes/qrexec-policy`: internal program used to evaluate the policy file and making the 2nd half of the connection."
msgstr ""

#: ../developer/services/qrexec2.md:260
#: 7ab165a80698484d8a170edd5ca4a591
msgid "`/usr/lib/qubes/qrexec-client`: raw command line tool that talks to the daemon via unix socket (`/var/run/qubes/qrexec.XID`)"
msgstr ""

#: ../developer/services/qrexec2.md:263
#: 50b6c91f1f2b4b4ea8dc33d9c1f79710
msgid "**Note:** None of the above tools are designed to be used by users."
msgstr ""

#: ../developer/services/qrexec2.md:265
#: 230710fbada74cd4843c2e5aae837fba
msgid "Linux VMs implementation"
msgstr ""

#: ../developer/services/qrexec2.md:269
#: d3077deafe0f40cb8a14943b524ee9cc
msgid "`/usr/lib/qubes/qrexec-agent`: started by VM bootup scripts, a daemon."
msgstr ""

#: ../developer/services/qrexec2.md:270
#: 880683212b0e4b5ca859dac6296adcdd
msgid "`/usr/lib/qubes/qubes-rpc-multiplexer`: executes the actual service program, as specified in VM's `/etc/qubes-rpc/qubes.XYZ`."
msgstr ""

#: ../developer/services/qrexec2.md:272
#: 1b0628f3f96549f59c193125de764016
msgid "`/usr/lib/qubes/qrexec-client-vm`: raw command line tool that talks to the agent."
msgstr ""

#: ../developer/services/qrexec2.md:275
#: ../developer/services/qrexec2.md:291
#: 83d6198aa7754ad89853a7ac7ead74b0
#: 962c5dca13a34039b11849a005233720
msgid "**Note:** None of the above tools are designed to be used by users. `qrexec-client-vm` is designed to be wrapped up by Qubes apps."
msgstr ""

#: ../developer/services/qrexec2.md:278
#: cd891d8d5d4b45cea61de18119e3a99b
msgid "Windows VMs implementation"
msgstr ""

#: ../developer/services/qrexec2.md:280
#: f0b4d1e4fff3454b8887b564e77d0864
msgid "`%QUBES_DIR%` is the installation path (`c:\\Program Files\\Invisible Things Lab\\Qubes OS Windows Tools` by default)."
msgstr ""

#: ../developer/services/qrexec2.md:283
#: 8feed455439646a0bc866d9ba88b35fa
msgid "`%QUBES_DIR%\\bin\\qrexec-agent.exe`: runs as a system service. Responsible both for raw command execution and interpreting RPC service requests."
msgstr ""

#: ../developer/services/qrexec2.md:285
#: f8bee01508fb4e0dbedd36c7d0360bd0
msgid "`%QUBES_DIR%\\qubes-rpc`: directory with `qubes.XYZ` files that contain commands for executing RPC services. Binaries for the services are contained in `%QUBES_DIR%\\qubes-rpc-services`."
msgstr ""

#: ../developer/services/qrexec2.md:288
#: a8007e73800844af959b5311e86e5953
msgid "`%QUBES_DIR%\\bin\\qrexec-client-vm`: raw command line tool that talks to the agent."
msgstr ""

#: ../developer/services/qrexec2.md:294
#: 79b0b0c3f5ab410e8471dbb6f9057d8b
msgid "All the pieces together at work"
msgstr ""

#: ../developer/services/qrexec2.md:296
#: f794ff5de800499e84fe13c67ea74d86
msgid "**Note:** This section is not needed to use qrexec for writing Qubes apps. Also note the [qrexec framework implemention in Qubes R3](/doc/qrexec3/) significantly differs from what is described in this section."
msgstr ""

#: ../developer/services/qrexec2.md:300
#: 66025dc5745b4b86b1c80cee52f2f067
msgid "The VM-VM channels in Qubes R2 are made via \"gluing\" two VM-Dom0 and Dom0-VM vchan connections:"
msgstr ""

#: ../developer/services/qrexec2.md:303
#: f74819f8662f4611b129102f57fc2972
msgid "![qrexec2-internals.png](/attachment/doc/qrexec2-internals.png)"
msgstr ""

#: ../developer/services/qrexec2.md:303
#: 8f3c4081f1b54d5fb0975b6c93414a72
msgid "qrexec2-internals.png"
msgstr ""

#: ../developer/services/qrexec2.md:305
#: 062f9579d6224cb686538e9166dd6728
msgid "Note that Dom0 never examines the actual data flowing in neither of the two vchan connections."
msgstr ""

#: ../developer/services/qrexec2.md:308
#: 8d1ab522b65d494693166bf5c787b1dd
msgid "When a user in a source VM executes `qrexec-client-vm` utility, the following steps are taken:"
msgstr ""

#: ../developer/services/qrexec2.md:311
#: 3cedfa5684b8467993632437110ef0b9
msgid "`qrexec-client-vm` connects to `qrexec-agent`'s `/var/run/qubes/qrexec-agent-fdpass` unix socket 3 times. Reads 4 bytes from each of them, which is the fd number of the accepted socket in agent. These 3 integers, in text, concatenated, form \"connection identifier\" (CID)"
msgstr ""

#: ../developer/services/qrexec2.md:315
#: 59830de2da1c40e2b6fef7299c6ce567
msgid "`qrexec-client-vm` writes to `/var/run/qubes/qrexec-agent` fifo a blob, consisting of target vmname, rpc action, and CID"
msgstr ""

#: ../developer/services/qrexec2.md:317
#: de1e5fc977da404ca61968d214ef4ce8
msgid "`qrexec-client-vm` executes the rpc client, passing the above mentioned unix sockets as process stdin/stdout, and optionally stderr (if the `PASS_LOCAL_STDERR` env variable is set)"
msgstr ""

#: ../developer/services/qrexec2.md:320
#: 578b6842fcc54f1180acb0ab8df3f782
msgid "`qrexec-agent` passes the blob to `qrexec-daemon`, via `MSG_AGENT_TO_SERVER_TRIGGER_CONNECT_EXISTING` message over vchan"
msgstr ""

#: ../developer/services/qrexec2.md:322
#: 443c999064e045b29fb0ec2df118ddd7
msgid "`qrexec-daemon` executes `qrexec-policy`, passing source vmname, target vmname, rpc action, and CID as cmdline arguments"
msgstr ""

#: ../developer/services/qrexec2.md:324
#: d4c62a929c2a4ccab164f253857ba63d
msgid "`qrexec-policy` evaluates the policy file. If successful, creates a pair of `qrexec-client` processes, whose stdin/stdout are cross-connected."
msgstr ""

#: ../developer/services/qrexec2.md:326
#: bd8ad0c66dbc4a269e5bf81b8e8aab41
msgid "The first `qrexec-client` connects to the src VM, using the `-c ClientID` parameter, which results in not creating a new process, but connecting to the existing process file descriptors (these are the fds of unix socket created in step 1)."
msgstr ""

#: ../developer/services/qrexec2.md:330
#: 9329f3c8c6804c2dbcf694a1e0bce1d0
msgid "The second `qrexec-client` connects to the target VM, and executes `qubes-rpc-multiplexer` command there with the rpc action as the cmdline argument. Finally, `qubes-rpc-multiplexer` executes the correct rpc server on the target."
msgstr ""

#: ../developer/services/qrexec2.md:334
#: 286cfef324274d88809c9450d985809f
msgid "In the above step, if the target VM is `$dispvm`, the DispVM is created via the `qfile-daemon-dvm` program. The latter waits for the `qrexec-client` process to exit, and then destroys the DispVM."
msgstr ""

#: ../developer/services/qrexec2.md:338
#: ef8cfa61dd354d49bfa5133b3b7a9bb9
msgid "*TODO: Protocol description (\"wire-level\" spec)*"
msgstr ""
