# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2021, test
# This file is distributed under the same license as the qubes-docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: qubes-docs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-12-15 21:10+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../developer/services/qfilecopy.md:13
#: 718c328fa7be43f09c9d1770f07984ff
msgid "There are two cases when we need a mechanism to copy files between VMs:"
msgstr ""

#: ../developer/services/qfilecopy.md:15
#: 25e74dcf2d8341e0b53208a6df90b662
msgid "\"regular\" file copy - when user instructs file manager to copy a given files/directories to a different VM"
msgstr ""

#: ../developer/services/qfilecopy.md:16
#: e9013183bc6a4777b82d8123a10ae7bf
msgid "DispVM copy - user selects \"open in DispVM\" on a file; this file must be copied to a DisposableVM, edited by user, and possibly a modified file copied back from DispVM to VM."
msgstr ""

#: ../developer/services/qfilecopy.md:18
#: ce5858f3286e4152a93f8f9728de9ce9
msgid "Prior to Qubes Beta1, for both cases, a block device (backed by a file in dom0 with a vfat filesystem on it) was attached to VM, file(s) copied there, and then the device was detached and attached to target VM. In the DispVM case, if a edited file has been modified, another block device is passed to requester VM in order to update the source file."
msgstr ""

#: ../developer/services/qfilecopy.md:20
#: f61bce25fdf345c991d1b7c049b74390
msgid "This has the following disadvantages:"
msgstr ""

#: ../developer/services/qfilecopy.md:22
#: 4e9b2608e07c4ebb8d631946a2a75659
msgid "performance - dom0 has to prepare and attach/detach block devices, which is slow because of hotplug scripts involvement."
msgstr ""

#: ../developer/services/qfilecopy.md:23
#: 03774a18e5d749a9b641620dbf46b164
msgid "security - VM kernel parses partition table and filesystem metadata from the block device; they are controlled by (potentially untrusted) sender VM."
msgstr ""

#: ../developer/services/qfilecopy.md:25
#: ec7932b413ef4cb2a9ad4ed9349509ac
msgid "In Qubes Beta1, we have reimplemented interVM file copy using qrexec, which addresses the above mentioned disadvantages. In Qubes Beta2, even more generic solution (qubes rpc) is used. See the developer docs on qrexec and qubes rpc. In a nutshell, the file sender and the file receiver just read/write from stdin/stdout, and the qubes rpc layer passes data properly - so, no block devices are used."
msgstr ""

#: ../developer/services/qfilecopy.md:27
#: 9683f5ef2dbd4d5e98d0019c4673bef5
msgid "The rpc action for regular file copy is *qubes.Filecopy*, the rpc client is named *qfile-agent*, the rpc server is named *qfile-unpacker*. For DispVM copy, the rpc action is *qubes.OpenInVM*, the rpc client is named *qopen-in-vm*, rpc server is named *vm-file-editor*. Note that the qubes.OpenInVM action can be done on a normal AppVM, too."
msgstr ""

#: ../developer/services/qfilecopy.md:29
#: ce431fa50bef4af8ac341844ec933f7a
msgid "Being a rpc server, *qfile-unpacker* must be coded securely, as it processes potentially untrusted data format. Particularly, we do not want to use external tar or cpio and be prone to all vulnerabilities in them; we want a simplified, small utility, that handles only directory/file/symlink file type, permissions, mtime/atime, and assume user/user ownership. In the current implementation, the code that actually parses the data from srcVM has ca 100 lines of code and executes chrooted to the destination directory. The latter is hardcoded to `~user/QubesIncoming/srcVM`; because of chroot, there is no possibility to alter files outside of this directory."
msgstr ""
