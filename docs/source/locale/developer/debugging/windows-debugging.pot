# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2021, test
# This file is distributed under the same license as the qubes-docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: qubes-docs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-12-15 21:10+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../developer/debugging/windows-debugging.md:13
#: 42477549bb3b4f86ae98654acec082cd
msgid "Debugging Windows code can be tricky in a virtualized environment. The guide below assumes Xen hypervisor and Windows 7 VMs."
msgstr ""

#: ../developer/debugging/windows-debugging.md:15
#: 1dc6ce8756ed43d2acf0c2c20a722a68
msgid "User-mode debugging is usually straightforward if it can be done on one machine. Just duplicate your normal debugging environment in the VM."
msgstr ""

#: ../developer/debugging/windows-debugging.md:17
#: 517a23b73c054153a6ce927759b6c640
msgid "Things get complicated if you need to perform kernel debugging or troubleshoot problems that only manifest on system boot, user logoff or similar. For that you need two Windows VMs: the *host* and the *target*. The *host* will contain [WinDbg](https://msdn.microsoft.com/en-us/library/windows/hardware/ff551063(v=vs.85).aspx) installation, your source code and private symbols. The *target* will run the code being debugged. Both will be linked by virtual serial ports."
msgstr ""

#: ../developer/debugging/windows-debugging.md:19
#: b261c06ae6bc46e09e78bdffc32a857b
msgid "First, you need to prepare separate copies of both *target* and *host* VM configuration files with some changes. Copy the files from **/var/lib/qubes/appvms/vmname/vmname.conf** to some convenient location, let's call them **host.conf** and **target.conf**."
msgstr ""

#: ../developer/debugging/windows-debugging.md:20
#: 42c57ec0d7ab49518dcf01e9c5f5bcc0
msgid "In both copied files add the following line at the end: `serial = 'pty'`. This will make Xen connect VM's serial ports to dom0's ptys."
msgstr ""

#: ../developer/debugging/windows-debugging.md:21
#: ce24234248ee4129bb6727712d9ac5d3
msgid "From now on you need to start both VMs like this: `qvm-start --custom-config=/your/edited/host.conf host`"
msgstr ""

#: ../developer/debugging/windows-debugging.md:22
#: 9c62f30974e84dd99f38735f800e62d7
msgid "To connect both VM serial ports together you will either need [socat](http://www.dest-unreach.org/socat/) or a custom utility described later."
msgstr ""

#: ../developer/debugging/windows-debugging.md:23
#: f526b60723b24b5092d7b78ed8589d2e
msgid "To determine which dom0 pty corresponds to VM's serial port you need to read xenstore, example script below:"
msgstr ""

#: ../developer/debugging/windows-debugging.md:33
#: f87b79dd1f3a411197f5a042c61dac73
msgid "Pass it a running VM name and it will output the corresponding pty name."
msgstr ""

#: ../developer/debugging/windows-debugging.md:35
#: 70a6affddfda4b359d5b77c59c48a899
msgid "To connect both ptys you can use [socat](http://www.dest-unreach.org/socat/) like that:"
msgstr ""

#: ../developer/debugging/windows-debugging.md:47
#: afdc96e3f0544176bd5cd98ffd7c6f0b
msgid "...but there is a catch. Xen seems to process the traffic that goes through serial ports and changes all **0x0a** bytes into **0x0d, 0x0a** pairs (newline conversion). I didn't find a way to turn that off (setting ptys to raw mode didn't change anything) and it's not mentioned anywhere on the Internet, so maybe it's something on my system. If the above script works for you then you don't need anything more in dom0."
msgstr ""

#: ../developer/debugging/windows-debugging.md:49
#: f829227826d74fb49ee693f8d4006a4c
msgid "On the *target* system, run `bcdedit /set debug on` on the console to turn on kernel debugging. It defaults to the first serial port."
msgstr ""

#: ../developer/debugging/windows-debugging.md:50
#: bafe70fb3e9d4dd8835e88f17d85a907
msgid "On the *host* system, install [WinDbg](http://msdn.microsoft.com/en-us/library/windows/hardware/ff551063(v=vs.85).aspx) and start the kernel debug (Ctrl-K), choose **com1** as the debug port."
msgstr ""

#: ../developer/debugging/windows-debugging.md:51
#: 15c604c3fafa4001b9d4dadcbdc3810f
msgid "Reboot the *target* VM."
msgstr ""

#: ../developer/debugging/windows-debugging.md:52
#: 746f58fa67b14c6c815252a25a230ee0
msgid "Run the above shell script in dom0."
msgstr ""

#: ../developer/debugging/windows-debugging.md:53
#: dd48cdbe9efb461ea80de15a93a1b9ed
msgid "If everything is fine you should see the proper kernel debugging output in WinDbg. However, if you see something like that:"
msgstr ""

#: ../developer/debugging/windows-debugging.md:77
#: f7f76124074a4bc7bc6dd5b072207cc8
msgid "...then you're most likely a victim of the CRLF issue mentioned above. To get around it I wrote a small utility that basically does what socat would do and additionally corrects those replaced bytes in the stream. It's not pretty but it works:"
msgstr ""

#: ../developer/debugging/windows-debugging.md:191
#: 78f74a17a6d6485c821daabd53894c4c
msgid "This utility is a unidirectional relay so you need to run two instances to get duplex communication, like:"
msgstr ""

#: ../developer/debugging/windows-debugging.md:201
#: 2780549baa8f428fb35422ceae73ccc7
msgid "With this everything should be good:"
msgstr ""

#: ../developer/debugging/windows-debugging.md:217
#: c4f38ad838ee4e3bbc4805e121816f6e
msgid "Debugging HVMs in the Qubes R4.0"
msgstr ""

#: ../developer/debugging/windows-debugging.md:219
#: 0badd437a30c4fa989577c8741a58214
msgid "There are two main issues to be adopted to get all things to work in the R4.0."
msgstr ""

#: ../developer/debugging/windows-debugging.md:221
#: 94f2662e3c53488da242184d2ba6402d
msgid "Add a virtual serial port"
msgstr ""

#: ../developer/debugging/windows-debugging.md:223
#: 109e8ede8ced428fb067e5d43a4ebe32
msgid "Qemu in the stub domain with virtual serial port added in a recommended way (```<serial type=\"pty\"/>```) fails to start (Could not open '/dev/hvc1': No such device). It seems like a lack of multiple xen consoles support/configuration. The only way that I have found is to attach serial port explicitly to the available console."
msgstr ""

#: ../developer/debugging/windows-debugging.md:225
#: 69c87a33dd8b41ae9c1bbf53f739e92d
msgid "Unpack stub domain in dom0:"
msgstr ""

#: ../developer/debugging/windows-debugging.md:236
#: 7b0d9860e85e4767b836ccd35d8a7393
msgid "Edit Init script to remove last loop and to add \"-serial /dev/hvc0\" to the qemu command line."
msgstr ""

#: ../developer/debugging/windows-debugging.md:238
#: 2565d1f3f0f54f4187b3e792122c6b94
msgid "Apply changes:"
msgstr ""

#: ../developer/debugging/windows-debugging.md:245
#: 9a37320052d04fee984a9b0ab8ee3af0
msgid "Connect two consoles"
msgstr ""

#: ../developer/debugging/windows-debugging.md:247
#: 3a028814d9f0415d8748778141a58f2d
msgid "Run the following script:"
msgstr ""

#: ../developer/debugging/windows-debugging.md:261
#: 8768e37e39af443aba6de87a957565c0
msgid "Happy debugging!"
msgstr ""
