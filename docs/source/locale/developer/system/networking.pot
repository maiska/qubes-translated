# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2021, test
# This file is distributed under the same license as the qubes-docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: qubes-docs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-12-15 21:10+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../developer/system/networking.md:14
#: 7b49bc79156d4b23afb8a5e149ba35ab
msgid "Overall description"
msgstr ""

#: ../developer/system/networking.md:16
#: bed5ebb98c6b428a90ad23f3669e5ba7
msgid "In Qubes, the standard Xen networking is used, based on backend driver in the driver domain and frontend drivers in VMs. In order to eliminate layer 2 attacks originating from a compromised VM, routed networking is used instead of the default bridging of `vif` devices and NAT is applied at each network hop. The default *vif-route* script had some deficiencies (requires `eth0` device to be up, and sets some redundant iptables rules), therefore the custom *vif-route-qubes* script is used."
msgstr ""

#: ../developer/system/networking.md:18
#: fe777ac0ec5d4d54bb6fcd04af3968ba
msgid "The IP address of `eth0` interface in AppVM, as well as two IP addresses to be used as nameservers (`DNS1` and `DNS2`), are passed via QubesDB to AppVM during its boot (thus, there is no need for DHCP daemon in the network driver domain). `DNS1` and `DNS2` are private addresses; whenever an interface is brought up in the network driver domain, the */usr/lib/qubes/qubes\\_setup\\_dnat\\_to\\_ns* script sets up the DNAT iptables rules translating `DNS1` and `DNS2` to the newly learned real dns servers. This way AppVM networking configuration does not need to be changed when configuration in the network driver domain changes (e.g. user switches to a different WLAN). Moreover, in the network driver domain, there is no DNS server either, and consequently there are no ports open to the VMs."
msgstr ""

#: ../developer/system/networking.md:20
#: 459177d77af04cb7b471ac4a594031ee
msgid "Routing tables examples"
msgstr ""

#: ../developer/system/networking.md:22
#: d0b649b352dc4991abdd146aaa908a2c
msgid "VM routing table is simple:"
msgstr ""

#: ../developer/system/networking.md:24
#: 1a4249f700444f4b8e56fa4b241c041c
msgid "|| |Destination|Gateway|Genmask|Flags|Metric|Ref|Use|Iface| |0.0.0.0|0.0.0.0|0.0.0.0|U|0|0|0|eth0|"
msgstr ""

#: ../developer/system/networking.md:28
#: ab1d0125856b4229b119ace8e4b9f5e3
msgid "Network driver domain routing table is a bit longer:"
msgstr ""

#: ../developer/system/networking.md:30
#: d23dd5e570994207b463a6884f29a43b
msgid "|| |Destination|Gateway|Genmask|Flags|Metric|Ref|Use|Iface| |10.137.0.16|0.0.0.0|255.255.255.255|UH|0|0|0|vif4.0| |10.137.0.7|0.0.0.0|255.255.255.255|UH|0|0|0|vif10.0| |10.137.0.9|0.0.0.0|255.255.255.255|UH|0|0|0|vif9.0| |10.137.0.8|0.0.0.0|255.255.255.255|UH|0|0|0|vif8.0| |10.137.0.12|0.0.0.0|255.255.255.255|UH|0|0|0|vif3.0| |192.168.0.0|0.0.0.0|255.255.255.0|U|1|0|0|eth0| |0.0.0.0|192.168.0.1|0.0.0.0|UG|0|0|0|eth0|"
msgstr ""

#: ../developer/system/networking.md:40
#: c206b83719f04e91ba3270ca084fdd26
msgid "IPv6"
msgstr ""

#: ../developer/system/networking.md:42
#: c1c2d05bbd1e4fafa442758875a37d55
msgid "Starting with Qubes 4.0, there is opt-in support for IPv6 forwarding. Similar to the IPv4, traffic is routed and NAT is applied at each network gateway. This way we avoid reconfiguring every connected qube whenever uplink connection is changed, and even telling the qube what that uplink is - which may be complex when VPN or other tunneling services are employed. The feature can be enabled on any network-providing qube, and will be propagated down the network tree, so every qube connected to it will also have IPv6 enabled. To enable the `ipv6` feature use `qvm-features` tool and set the value to `1`. For example to enable it on `sys-net`, execute in dom0:"
msgstr ""

#: ../developer/system/networking.md:50
#: e004c26e987049c9b7cb241dcc648f60
msgid "It is also possible to explicitly disable IPv6 support for some qubes, even if it is connected to IPv6-providing one. This can be done by setting `ipv6` feature to empty value:"
msgstr ""

#: ../developer/system/networking.md:56
#: 2817e2bbc3e64d11b670245d8e373ac3
msgid "This configuration is presented below - green qubes have IPv6 access, red one does not."
msgstr ""

#: ../developer/system/networking.md:58
#: 3acc8813a7024b3498ebe68c41bee24c
msgid "![ipv6-1](/attachment/doc/ipv6-1.png)"
msgstr ""

#: ../developer/system/networking.md:58
#: e9a77901b7a04e71a49bcb283a913899
msgid "ipv6-1"
msgstr ""

#: ../developer/system/networking.md:60
#: f4812a8707b546e5923d691a3e84ae1c
msgid "In that case, system uplink connection have native IPv6. But in some cases it may not be true. Then some tunneling solution can be used (for example teredo). The same will apply when the user is connected to VPN service providing IPv6 support, regardless of user's internet connection. Such configuration can be expressed by enabling `ipv6` feature only on some subset of Qubes networking, for example by creating separate qube to encapsulate IPv6 traffic and setting `ipv6` to `1` only there. See diagram below"
msgstr ""

#: ../developer/system/networking.md:63
#: 97c9eb24759e4a6fbede52cca9fd3f6f
msgid "![ipv6-2](/attachment/doc/ipv6-2.png)"
msgstr ""

#: ../developer/system/networking.md:63
#: 8ac77dde99ce494db7e5c93ced3c9fe3
msgid "ipv6-2"
msgstr ""

#: ../developer/system/networking.md:65
#: 9392e2306ffd49a49af57ac9bec408b4
msgid "Besides enabling IPv6 forwarding, standard Qubes firewall can be used to limit what network resources are available to each qube. Currently only `qvm-firewall` command support adding IPv6 rules, GUI firewall editor will have this ability later."
msgstr ""

#: ../developer/system/networking.md:67
#: 884d46a8af3741bc8d13e1d54550f02a
msgid "Limitations"
msgstr ""

#: ../developer/system/networking.md:69
#: 2887191ad69a41b6a1a66f057ccbbb09
msgid "Currently only IPv4 DNS servers are configured, regardless of `ipv6` feature state. It is done this way to avoid reconfiguring all connected qubes whenever IPv6 DNS becomes available or not. Configuring qubes to always use IPv6 DNS and only fallback to IPv4 may result in relatively long timeouts and poor usability. But note that DNS using IPv4 does not prevent to return IPv6 addresses. In practice this is only a problem for IPv6-only networks."
msgstr ""
