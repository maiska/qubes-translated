# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2021, test
# This file is distributed under the same license as the qubes-docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: qubes-docs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-12-15 21:10+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../developer/system/template-implementation.md:13
#: ff9222e0b87a4d0c8bac66f80ee9a9b2
msgid "Every VM has 4 block devices connected:"
msgstr ""

#: ../developer/system/template-implementation.md:15
#: 3dab9caded034751bd5a52ecb8ce0461
msgid "**xvda** – base root device (/) – details described below"
msgstr ""

#: ../developer/system/template-implementation.md:16
#: ca16f0cda15a4009840324418d7bef5f
msgid "**xvdb** – private.img – place where VM always can write."
msgstr ""

#: ../developer/system/template-implementation.md:17
#: 0cf7c7289690465ca6cade05ae497815
msgid "**xvdc** – volatile.img, discarded at each VM restart – here is placed swap and temporal \"/\" modifications (see below)"
msgstr ""

#: ../developer/system/template-implementation.md:18
#: d3c1b77934434649a04b4070970243e8
msgid "**xvdd** – modules.img – kernel modules and firmware"
msgstr ""

#: ../developer/system/template-implementation.md:20
#: 4fd3c352fd4441ae9630acf709b7bbb0
msgid "private.img (xvdb)"
msgstr ""

#: ../developer/system/template-implementation.md:22
#: 82a86b1482074e8c8030f8dd61535671
msgid "This is mounted as /rw and here is placed all VM private data. This includes:"
msgstr ""

#: ../developer/system/template-implementation.md:24
#: e9e0fd74efd547f4bb8a3b809baf04cd
msgid "*/home* – which is bind mounted to /rw/home"
msgstr ""

#: ../developer/system/template-implementation.md:25
#: 6c662c9daff1416d8c2dfdcef645a7de
msgid "*/usr/local* – which is symlink to /rw/usrlocal"
msgstr ""

#: ../developer/system/template-implementation.md:26
#: f27296bafecf4c939afbc104785eca36
msgid "some config files (/rw/config) called by qubes core scripts (ex /rw/config/rc.local)"
msgstr ""

#: ../developer/system/template-implementation.md:28
#: 0737d090516d477bbebd50d79540c586
msgid "**Note:** Whenever a TemplateBasedVM is created, the contents of the `/home` directory of its parent TemplateVM are *not* copied to the child TemplateBasedVM's `/home`. The child TemplateBasedVM's `/home` is independent from its parent TemplateVM's `/home`, which means that any changes to the parent TemplateVM's `/home` will not affect the child TemplateBasedVM's `/home`. Once a TemplateBasedVM has been created, any changes in its `/home`, `/usr/local`, or `/rw/config` directories will be persistent across reboots, which means that any files stored there will still be available after restarting the TemplateBasedVM. No changes in any other directories in TemplateBasedVMs persist in this manner. If you would like to make changes in other directories which *do* persist in this manner, you must make those changes in the parent TemplateVM."
msgstr ""

#: ../developer/system/template-implementation.md:30
#: f21df65f521d44e98cc06fe53bcf952e
msgid "modules.img (xvdd)"
msgstr ""

#: ../developer/system/template-implementation.md:32
#: 7521d408d30a45faa4fb8e00facb54a4
msgid "As the kernel is chosen in dom0, there must be some way to provide matching kernel modules to VM. Qubes kernel directory consists of 3 files:"
msgstr ""

#: ../developer/system/template-implementation.md:34
#: 13b6c81399bc4169a678e84e1ee46918
msgid "*vmlinuz* – actual kernel"
msgstr ""

#: ../developer/system/template-implementation.md:35
#: 93f3b41f8a4945659da372cf7583b297
msgid "*initramfs* – initial ramdisk containing script to setup snapshot devices (see below) and mount /lib/modules"
msgstr ""

#: ../developer/system/template-implementation.md:36
#: 120b0e126bd745aab6e03bfadb96c002
msgid "*modules.img* – filesystem image of /lib/modules with matching kernel modules and firmware (/lib/firmware/updates is symlinked to /lib/modules/firmware)"
msgstr ""

#: ../developer/system/template-implementation.md:38
#: 16ea61b934354e39aaed3d79042f890e
msgid "Normally kernel \"package\" is common for many VMs (can be set using qvm-prefs). One of them can be set as default (qvm-set-default-kernel) to simplify kernel updates (by default all VMs use the default kernel). All installed kernels are placed in /var/lib/qubes/vm-kernels as separate subdirs. In this case, modules.img is attached to the VM as R/O device."
msgstr ""

#: ../developer/system/template-implementation.md:40
#: 69670eeb86974ad29a543352adf593e1
msgid "There is a special case when the VM can have a custom kernel – when it is updateable (StandaloneVM or TemplateVM) and the kernel is set to \"none\" (by qvm-prefs). In this case the VM uses the kernel from the \"kernels\" VM subdir and modules.img is attached as R/W device. FIXME: \"none\" should be renamed to \"custom\"."
msgstr ""

#: ../developer/system/template-implementation.md:42
#: b5668c1776c0422798b7ff61ebaf2d8e
msgid "Qubes TemplateVM implementation"
msgstr ""

#: ../developer/system/template-implementation.md:44
#: aa37f851c66847da80c4c637e8a32820
msgid "TemplateVM has a shared root.img across all AppVMs that are based on it. This mechanism has some advantages over a simple common device connected to multiple VMs:"
msgstr ""

#: ../developer/system/template-implementation.md:46
#: c95de3dfa15b4cdaa69f2919952a49cb
msgid "root.img can be modified while there are AppVMs running – without corrupting the filesystem"
msgstr ""

#: ../developer/system/template-implementation.md:47
#: 95eacbfe7272468ab38ed51f48151fd3
msgid "multiple AppVMs that are using different versions of root.img (from various points in time) can be running concurrently"
msgstr ""

#: ../developer/system/template-implementation.md:49
#: a02d54045ab348dcad3762790b8e5a91
msgid "There are two layers of the device-mapper snapshot device; the first one enables modifying root.img without stopping the AppVMs and the second one, which is contained in the AppVM, enables temporal modifications to its filesystem. These modifications will be discarded after a restart of the AppVM."
msgstr ""

#: ../developer/system/template-implementation.md:51
#: b7c8c1682cc341218e04c8a39b335f2b
msgid "![TemplateSharing2.png](/attachment/doc/TemplateSharing2.png)"
msgstr ""

#: ../developer/system/template-implementation.md:51
#: 09a1dc45cd0f41f5ad0423ec83a2803c
msgid "TemplateSharing2.png"
msgstr ""

#: ../developer/system/template-implementation.md:53
#: 5cf18eca9a704f2b9622bd569f9066d8
msgid "Snapshot device in Dom0"
msgstr ""

#: ../developer/system/template-implementation.md:55
#: 7b3c249510b2443aa58a1b05b4c85af7
msgid "This device consists of:"
msgstr ""

#: ../developer/system/template-implementation.md:57
#: 1acafecf36884aa38594ea4196a0459e
msgid "root.img – real template filesystem"
msgstr ""

#: ../developer/system/template-implementation.md:58
#: bc734a3b3c7d4e75b460cdc7d7b2ff31
msgid "root-cow.img – differences between the device as seen by AppVM and the current root.img"
msgstr ""

#: ../developer/system/template-implementation.md:60
#: 27137e5a649b4e10b58fab2d0fcf1577
msgid "The above is achieved through creating device-mapper snapshots for each version of root.img. When an AppVM is started, a xen hotplug script (/etc/xen/scripts/block-snapshot) reads the inode numbers of root.img and root-cow.img; these numbers are used as the snapshot device's name. When a device with the same name exists the new AppVM will use it – therefore, AppVMs based on the same version of root.img will use the same device. Of course, the device-mapper cannot use the files directly – it must be connected through /dev/loop\\*. The same mechanism detects if there is a loop device associated with a file determined by the device and inode numbers – or if creating a new loop device is necessary."
msgstr ""

#: ../developer/system/template-implementation.md:62
#: 6a12cf676c2e46009587d4532295d5ff
msgid "When an AppVM is stopped the xen hotplug script checks whether the device is still in use – if it is not, the script removes the snapshot and frees the loop device."
msgstr ""

#: ../developer/system/template-implementation.md:64
#: 4b33c71c7cd9486587cb2fbe7ac0940b
msgid "Changes to template filesystem"
msgstr ""

#: ../developer/system/template-implementation.md:66
#: a54153606b1c422ea0059912dccbbef0
msgid "In order for the full potential of the snapshot device to be realized, every change in root.img must save the original version of the modified block in root-cow.img. This is achieved by a snapshot-origin device."
msgstr ""

#: ../developer/system/template-implementation.md:68
#: fccc52608fae45f297da3a1d0a180881
msgid "When TemplateVM is started, it receives the snapshot-origin device connected as a root device (in read-write mode). Therefore, every change to this device is immediately saved in root.img – but remains invisible to the AppVM, which uses the snapshot."
msgstr ""

#: ../developer/system/template-implementation.md:70
#: 534d4d104ffd44928ed88e3cdc146dd4
msgid "When TemplateVM is stopped, the xen script moves root-cow.img to root-cow.img.old and creates a new one (using the `qvm-template-commit` tool). The snapshot device will remain untouched due to the loop device, which uses an actual file on the disk (by inode, not by name). Linux kernel frees the old root-cow.img files as soon as they are unused by all snapshot devices (to be exact, loop devices). The new root-cow.img file will get a new inode number, and so new AppVMs will get new snapshot devices (with different names)."
msgstr ""

#: ../developer/system/template-implementation.md:72
#: 58ae3cb5053540b28f79c3952ffe3e2f
msgid "Rollback template changes"
msgstr ""

#: ../developer/system/template-implementation.md:74
#: 9f6ed2883aea417d8fc6d062deeb9b34
msgid "There is possibility to rollback last template changes. Saved root-cow.img.old contains all changes made during last TemplateVM run. Rolling back changes is done by reverting this \"binary patch\"."
msgstr ""

#: ../developer/system/template-implementation.md:76
#: 81083fd853cd421b9089a29a6265ea34
msgid "This is done using snapshot-merge device-mapper target (available from 2.6.34 kernel). It requires that no other snapshot device uses underlying block devices (root.img, root-cow.img via loop device). Because of this all AppVMs based on this template must be halted during this operation."
msgstr ""

#: ../developer/system/template-implementation.md:78
#: 40b7906709254811b64c4174f9ade320
msgid "Steps performed by **qvm-revert-template-changes**:"
msgstr ""

#: ../developer/system/template-implementation.md:80
#: 222663f042544a2ab3c41bb53d4683b8
msgid "Ensure that no other VMs uses this template."
msgstr ""

#: ../developer/system/template-implementation.md:81
#: 313df85462974189bc2e347bb08aa64c
msgid "Prepare snapshot device with ***root-cow.img.old*** instead of *root-cow.img* (*/etc/xen/scripts/block-snapshot prepare*)."
msgstr ""

#: ../developer/system/template-implementation.md:82
#: ea131fbbc8914b56bd3782b97fe5ecf3
msgid "Replace *snapshot* device-mapper target with *snapshot-merge*, other parameters (chunk size etc) remains untouched. Now kernel starts merging changes stored in *root-cow.img.old* into *root.img*. d-m device can be used normally (if needed)."
msgstr ""

#: ../developer/system/template-implementation.md:83
#: 021ae310cdf141fc8031bdd99841a0f5
msgid "Waits for merge completed: *dmsetup status* shows used snapshot blocks – it should be equal to metadata size when completed."
msgstr ""

#: ../developer/system/template-implementation.md:84
#: 7aa7120e15944a5cb883ca05bdfaf771
msgid "Replace *snapshot-merge* d-m target back to *snapshot*."
msgstr ""

#: ../developer/system/template-implementation.md:85
#: 1631361e65714cc1bfa9672da98533de
msgid "Cleanup snapshot device (if nobody uses it at the moment)."
msgstr ""

#: ../developer/system/template-implementation.md:86
#: d55f3f96dbf546d698ef68c77993ed9d
msgid "Move *root-cow.img.old* to *root-cow.img* (overriding existing file)."
msgstr ""

#: ../developer/system/template-implementation.md:88
#: 34c4435976ec4cd3870da01b51c2da91
msgid "Snapshot device in AppVM"
msgstr ""

#: ../developer/system/template-implementation.md:90
#: 28b8a4bfd4f741c9982275acc7c265b4
msgid "Root device is exposed to AppVM in read-only mode. AppVM can write only in:"
msgstr ""

#: ../developer/system/template-implementation.md:92
#: 1d5ce032d7244918accec3123a9956ca
msgid "private.img – persistent storage (mounted in /rw) used for /home, /usr/local – in future versions, its use may be extended"
msgstr ""

#: ../developer/system/template-implementation.md:93
#: 8ea467a0306c45c5b18e35afcdbf8734
msgid "volatile.img – temporary storage, which is discarded after an AppVM restart"
msgstr ""

#: ../developer/system/template-implementation.md:95
#: f704323e2f304020b37b90a53efadbd6
msgid "volatile.img is divided into two partitions:"
msgstr ""

#: ../developer/system/template-implementation.md:97
#: 1874f5173fb04d9d9f328d37217c30fb
msgid "changes to root device"
msgstr ""

#: ../developer/system/template-implementation.md:98
#: b8d505225089424ba8a790125c888ba0
msgid "swap partition"
msgstr ""

#: ../developer/system/template-implementation.md:100
#: b2d4c6ada75f4db88500aa0054f60efe
msgid "Inside of an AppVM, the root device is wrapped by the snapshot in the first partition of volatile.img. Therefore, the AppVM can write anything to its filesystem – however, such changes will be discarded after a restart."
msgstr ""

#: ../developer/system/template-implementation.md:102
#: 3abc503516fe42cfb0ffe9ace439e205
msgid "StandaloneVM"
msgstr ""

#: ../developer/system/template-implementation.md:104
#: d94416a89376491ca9249cc61695d946
msgid "Standalone VM enables user to modify root filesystem persistently. It can be created using *--standalone* switch to *qvm-create*."
msgstr ""

#: ../developer/system/template-implementation.md:106
#: b3bdb3c87be0451aa23b9f0079bfc833
msgid "It is implemented just like TemplateVM (has own root.img connected as R/W device), but no other VMs can be based on it."
msgstr ""
