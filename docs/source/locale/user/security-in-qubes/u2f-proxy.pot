# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2021, test
# This file is distributed under the same license as the qubes-docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: qubes-docs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-12-15 21:10+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../user/security-in-qubes/u2f-proxy.md:9
#: fddd562e2e45436a835035acc614c78a
msgid "The [Qubes U2F Proxy](https://github.com/QubesOS/qubes-app-u2f) is a secure proxy intended to make use of U2F two-factor authentication devices with web browsers without exposing the browser to the full USB stack, not unlike the [USB keyboard and mouse proxies](/doc/usb/) implemented in Qubes."
msgstr ""

#: ../user/security-in-qubes/u2f-proxy.md:11
#: d3499db653e149cf95efa4f608ca6b2b
msgid "What is U2F?"
msgstr ""

#: ../user/security-in-qubes/u2f-proxy.md:13
#: 97d94838ec0b42838a1fcab76561554f
msgid "[U2F](https://en.wikipedia.org/wiki/U2F), which stands for \"Universal 2nd Factor\", is a framework for authentication using hardware devices (U2F tokens) as \"second factors\", i.e. *what you have* as opposed to *what you know*, like a passphrase. This additional control provides [good protection](https://krebsonsecurity.com/2018/07/google-security-keys-neutralized-employee-phishing/) in cases in which the passphrase is stolen (e.g. by phishing or keylogging). While passphrase compromise may not be obvious to the user, a physical device that cannot be duplicated must be stolen to be used outside of the owner's control. Nonetheless, it is important to note at the outset that U2F cannot guarantee security when the host system is compromised (e.g. a malware-infected operating system under an adversary's control)."
msgstr ""

#: ../user/security-in-qubes/u2f-proxy.md:18
#: 78c3edbd36954293b386056bc6e6ab72
msgid "The U2F specification defines protocols for multiple layers from USB to the browser API, and the whole stack is intended to be used with web applications (most commonly websites) in browsers. In most cases, tokens are USB dongles. The protocol is very simple, allowing the devices to store very little state inside (so the tokens may be reasonably cheap) while simultaneously authenticating a virtually unlimited number of services (so each person needs only one token, not one token per application). The user interface is usually limited to a single LED and a button that is pressed to confirm each transaction, so the devices themselves are also easy to use."
msgstr ""

#: ../user/security-in-qubes/u2f-proxy.md:23
#: 356c92c301514a55a3a86d7e3a5c8988
msgid "Currently, the most common form of two-step authentication consists of a numeric code that the user manually types into a web application. These codes are typically generated by an app on the user's smartphone or sent via SMS. By now, it is well-known that this form of two-step authentication is vulnerable to phishing and man-in-the-middle attacks due to the fact that the application requesting the two-step authentication code is typically not itself authenticated by the user. (In other words, users can accidentally give their codes to attackers because they do not always know who is really requesting the code.) In the U2F model, by contrast, the browser ensures that the token receives valid information about the web application requesting authentication, so the token knows which application it is authenticating (for details, see [here](https://fidoalliance.org/specs/fido-u2f-v1.2-ps-20170411/fido-u2f-overview-v1.2-ps-20170411.html#site-specific-public-private-key-pairs)). Nonetheless, [some attacks are still possible](https://www.wired.com/story/chrome-yubikey-phishing-webusb/) even with U2F (more on this below)."
msgstr ""

#: ../user/security-in-qubes/u2f-proxy.md:29
#: 25e4557f51874148af72667dd0a6d710
msgid "The Qubes approach to U2F"
msgstr ""

#: ../user/security-in-qubes/u2f-proxy.md:31
#: 1f4ec1249814422c9d5357eb98a4bdf5
msgid "In a conventional setup, web browsers and the USB stack (to which the U2F token is connected) are all running in the same monolithic OS. Since the U2F model assumes that the browser is trustworthy, any browser in the OS is able to access any key stored on the U2F token. The user has no way to know which keys have been accessed by which browsers for which services. If any of the browsers are compromised, it should be assumed that all of the token's keys have been compromised. (This problem can be mitigated, however, if the U2F device has a special display to show the user what's being authenticated.) Moreover, since the USB stack is in the same monolithic OS, the system is vulnerable to attacks like [BadUSB](https://www.blackhat.com/us-14/briefings.html#badusb-on-accessories-that-turn-evil)."
msgstr ""

#: ../user/security-in-qubes/u2f-proxy.md:37
#: 5b4bb65704ad4078bbdac71178236b63
msgid "In Qubes OS, by contrast, it is possible to securely compartmentalise the browser in one qube and the USB stack in another so that they are always kept separate from each other. The Qubes U2F Proxy then allows the token connected to the USB stack in one qube to communicate with the browser in a separate qube. We operate under the assumption that the USB stack is untrusted from the point of view of the browser and also that the browser is not to be trusted blindly by the token. Therefore, the token is never in the same qube as the browser. Our proxy forwards only the data necessary to actually perform the authentication, leaving all unnecessary data out, so it won't become a vector of attack. This is depicted in the diagram below (click for full size)."
msgstr ""

#: ../user/security-in-qubes/u2f-proxy.md:44
#: 9ad5c13f062c4646accdbfc21e9e08f4
msgid "[![Qubes U2F Proxy diagram](/attachment/doc/u2f.svg)](/attachment/doc/u2f.svg)"
msgstr ""

#: ../user/security-in-qubes/u2f-proxy.md:46
#: 0673a9944c524576a2f47deef647b90e
msgid "The Qubes U2F Proxy has two parts: the frontend and the backend. The frontend runs in the same qube as the browser and presents a fake USB-like HID device using `uhid`. The backend runs in `sys-usb` and behaves like a browser. This is done using the `u2flib_host` reference library. All of our code was written in Python. The standard [qrexec](/doc/qrexec3/) policy is responsible for directing calls to the appropriate domains."
msgstr ""

#: ../user/security-in-qubes/u2f-proxy.md:53
#: 6e698e939a334bc284be540d4b3be6e4
msgid "The `vault` qube with a dashed line in the bottom portion of the diagram depicts future work in which we plan to implement the Qubes U2F Proxy with a software token in an isolated qube rather than a physical hardware token. This is similar to the manner in which [Split GPG](/doc/split-gpg/) allows us to emulate the smart card model without physical smart cards."
msgstr ""

#: ../user/security-in-qubes/u2f-proxy.md:56
#: 3e19290b2a334511b24d15b871da8f3d
msgid "One very important assumption of U2F is that the browser verifies every request sent to the U2F token --- in particular, that the web application sending an authentication request matches the application that would be authenticated by answering that request (in order to prevent, e.g., a phishing site from sending an authentication request for your bank's site). With the WebUSB feature in Chrome, however, a malicious website can [bypass](https://www.wired.com/story/chrome-yubikey-phishing-webusb/) this safeguard by connecting directly to the token instead of using the browser's U2F API."
msgstr ""

#: ../user/security-in-qubes/u2f-proxy.md:59
#: ff91a7878fb44439b32e9abf42575dd3
msgid "The Qubes U2F Proxy also prevents this class of attacks by implementing an additional verification layer. This verification layer allows you to enforce, for example, that the web browser in your `twitter` qube can only access the U2F key associated with `https://twitter.com`. This means that if anything in your `twitter` qube were compromised --- the browser or even the OS itself --- it would still not be able to access the U2F keys on your token for any other websites or services, like your email and bank accounts. This is another significant security advantage over monolithic systems. (For details and instructions, see the [Advanced usage](#advanced-usage-per-qube-key-access) section below.)"
msgstr ""

#: ../user/security-in-qubes/u2f-proxy.md:65
#: c05fafcc9b70473d9f7dc282329a83f7
msgid "For even more protection, you can combine this with the [Qubes firewall](/doc/firewall/) to ensure, for example, that the browser in your `banking` qube accesses only one website (your bank's website). By configuring the Qubes firewall to prevent your `banking` qube from accessing any other websites, you reduce the risk of another website compromising the browser in an attempt to bypass U2F authentication."
msgstr ""

#: ../user/security-in-qubes/u2f-proxy.md:68
#: 29cb14e471a0460ab49f71e9dc0c4bd7
msgid "Installation"
msgstr ""

#: ../user/security-in-qubes/u2f-proxy.md:70
#: 1abf46e7a1704e1fa58ca6a5c7ccc888
msgid "These instructions assume that there is a `sys-usb` qube that holds the USB stack, which is the default configuration in most Qubes OS installations."
msgstr ""

#: ../user/security-in-qubes/u2f-proxy.md:72
#: fd5fcb9716c643abb18cbdb2b992f1c4
msgid "In dom0:"
msgstr ""

#: ../user/security-in-qubes/u2f-proxy.md:79
#: aad7e0afea564791b452678f37e3d44e
msgid "The above assumes a `work` qube in which you would like to enable u2f. Repeat the `qvm-service` command for all qubes that should have the proxy enabled.  Alternatively, you can add `qubes-u2f-proxy` in VM settings -> Services in the Qube Manager of each qube you would like to enable the service."
msgstr ""

#: ../user/security-in-qubes/u2f-proxy.md:81
#: 840d0d3897b7467e95c13d02a8b0576e
msgid "In Fedora templates:"
msgstr ""

#: ../user/security-in-qubes/u2f-proxy.md:87
#: f6d4007b5398495889f33f3d9b54220d
msgid "In Debian templates:"
msgstr ""

#: ../user/security-in-qubes/u2f-proxy.md:93
#: 2c22ff1c836a40a8bf61622a24ae8f34
msgid "As usual with software updates, shut down the templates after installation, then restart `sys-usb` and all qubes that use the proxy. After that, you may use your U2F token (but see [Browser support](#template-and-browser-support) below)."
msgstr ""

#: ../user/security-in-qubes/u2f-proxy.md:96
#: 8b133f584b64470197fca11cd8230f59
msgid "Advanced usage: per-qube key access"
msgstr ""

#: ../user/security-in-qubes/u2f-proxy.md:98
#: 3caf8fd5fba64e77a55a78b3d8eb300f
msgid "If you are using Qubes 4.0, you can further compartmentalise your U2F keys by restricting each qube's access to specific keys. For example, you could make it so that your `twitter` qube (and, therefore, all web browsers in your `twitter` qube) can access only the key on your U2F token for `https://twitter.com`, regardless of whether any of the web browsers in your `twitter` qube or the `twitter` qube itself are compromised. If your `twitter` qube makes an authentication request for your bank website, it will be denied at the Qubes policy level."
msgstr ""

#: ../user/security-in-qubes/u2f-proxy.md:102
#: 57190846bb3d4458964461b30de404cd
msgid "To enable this, create a file in dom0 named `/etc/qubes-rpc/policy/policy.RegisterArgument+u2f.Authenticate` with the following content:"
msgstr ""

#: ../user/security-in-qubes/u2f-proxy.md:108
#: 2edf9d59093344438f45b6f683daff4c
msgid "Next, empty the contents of `/etc/qubes-rpc/policy/u2f.Authenticate` so that it is a blank file. Do not delete the file itself. (If you do, the default file will be recreated the next time you update, so it will no longer be empty.) Finally, follow your web application's instructions to enroll your token and use it as usual. (This enrollment process depends on the web application and is in no way specific to Qubes U2F.)"
msgstr ""

#: ../user/security-in-qubes/u2f-proxy.md:113
#: 88440b0fb82a4ab58f04dedd482320e0
msgid "The default model is to allow a qube to access all and only the keys that were enrolled by that qube. For example, if your `banking` qube enrolls your banking key, and your `twitter` qube enrolls your Twitter key, then your `banking` qube will have access to your banking key but not your Twitter key, and your `twitter` qube will have access to your Twitter key but not your banking key."
msgstr ""

#: ../user/security-in-qubes/u2f-proxy.md:116
#: f51eeda378514bc194967c9efcf40929
msgid "Non-default USB qube name"
msgstr ""

#: ../user/security-in-qubes/u2f-proxy.md:118
#: 3a0454c5c3c045d19926fedd3fb65f24
msgid "If your USB qube is named differently than `sys-usb`, then do the following in the appropriate template(s):"
msgstr ""

#: ../user/security-in-qubes/u2f-proxy.md:125
#: b4aeb5a887a3402689b7e9175760dd75
msgid "Replace `USB_QUBE` with the actual USB qube name."
msgstr ""

#: ../user/security-in-qubes/u2f-proxy.md:127
#: dc51155500c24b42ad86583a22a42bc5
msgid "Template and browser support"
msgstr ""

#: ../user/security-in-qubes/u2f-proxy.md:129
#: 09c34db283ac4d98acbc87414a5388ae
msgid "The large number of possible combinations of template (Fedora 27, 28; Debian 8, 9) and browser (multiple Google Chrome versions, multiple Chromium versions, multiple Firefox versions) made it impractical for us to test every combination that users are likely to attempt with the Qubes U2F Proxy. In some cases, you may be the first person to try a particular combination. Consequently (and as with any new feature), users will inevitably encounter bugs. We ask for your patience and understanding in this regard. As always, please [report any bugs you encounter](/doc/issue-tracking/)."
msgstr ""
