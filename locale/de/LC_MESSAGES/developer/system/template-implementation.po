# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2021, test
# This file is distributed under the same license as the qubes-docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: qubes-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-12-15 16:25+0100\n"
"PO-Revision-Date: 2021-12-15 15:10+0000\n"
"Language-Team: German (https://www.transifex.com/otf/teams/56717/de/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: de\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"

#: ../../_doc/developer/system/template-implementation.md:13
#: c1c3b076cb33480380efe6ae84ee521b
msgid "Every VM has 4 block devices connected:"
msgstr ""

#: ../../_doc/developer/system/template-implementation.md:15
#: c1aabd7d2460415f9daaf556554ec818
msgid "**xvda** – base root device (/) – details described below"
msgstr ""

#: ../../_doc/developer/system/template-implementation.md:16
#: 4cce387071d642b5b4f2790729cbcf4d
msgid "**xvdb** – private.img – place where VM always can write."
msgstr ""

#: ../../_doc/developer/system/template-implementation.md:17
#: 461e7cc584754d03840e8209b8641c66
msgid ""
"**xvdc** – volatile.img, discarded at each VM restart – here is placed swap "
"and temporal \"/\" modifications (see below)"
msgstr ""

#: ../../_doc/developer/system/template-implementation.md:18
#: d93375b99b7e4947b7d0a9f6dd6d7d44
msgid "**xvdd** – modules.img – kernel modules and firmware"
msgstr ""

#: ../../_doc/developer/system/template-implementation.md:20
#: 71ca88c4433744f5b773065d9db301b4
msgid "private.img (xvdb)"
msgstr ""

#: ../../_doc/developer/system/template-implementation.md:22
#: 08423c25df5b406eb8a9c7b1d74ce547
msgid ""
"This is mounted as /rw and here is placed all VM private data. This "
"includes:"
msgstr ""

#: ../../_doc/developer/system/template-implementation.md:24
#: 49ecbf57ea6c495292b8630231ad875f
msgid "*/home* – which is bind mounted to /rw/home"
msgstr ""

#: ../../_doc/developer/system/template-implementation.md:25
#: c2d839d2711c42b79fa1a2bcb2ee2d35
msgid "*/usr/local* – which is symlink to /rw/usrlocal"
msgstr ""

#: ../../_doc/developer/system/template-implementation.md:26
#: 1a088d69b8e942d7b5fa184af2804b02
msgid ""
"some config files (/rw/config) called by qubes core scripts (ex "
"/rw/config/rc.local)"
msgstr ""

#: ../../_doc/developer/system/template-implementation.md:28
#: 95aad5834df94691b5a0e38fc5b5a3ab
msgid ""
"**Note:** Whenever a TemplateBasedVM is created, the contents of the `/home`"
" directory of its parent TemplateVM are *not* copied to the child "
"TemplateBasedVM's `/home`. The child TemplateBasedVM's `/home` is "
"independent from its parent TemplateVM's `/home`, which means that any "
"changes to the parent TemplateVM's `/home` will not affect the child "
"TemplateBasedVM's `/home`. Once a TemplateBasedVM has been created, any "
"changes in its `/home`, `/usr/local`, or `/rw/config` directories will be "
"persistent across reboots, which means that any files stored there will "
"still be available after restarting the TemplateBasedVM. No changes in any "
"other directories in TemplateBasedVMs persist in this manner. If you would "
"like to make changes in other directories which *do* persist in this manner,"
" you must make those changes in the parent TemplateVM."
msgstr ""

#: ../../_doc/developer/system/template-implementation.md:30
#: 3af05b02f91f448d91f242141a9e9758
msgid "modules.img (xvdd)"
msgstr ""

#: ../../_doc/developer/system/template-implementation.md:32
#: 2c65adec6ee9452382844e38b1f9c2e1
msgid ""
"As the kernel is chosen in dom0, there must be some way to provide matching "
"kernel modules to VM. Qubes kernel directory consists of 3 files:"
msgstr ""

#: ../../_doc/developer/system/template-implementation.md:34
#: 0d4c2182c4384833ad5b98d9d94469c0
msgid "*vmlinuz* – actual kernel"
msgstr ""

#: ../../_doc/developer/system/template-implementation.md:35
#: ef712956b2fd41c0a91212615669cce5
msgid ""
"*initramfs* – initial ramdisk containing script to setup snapshot devices "
"(see below) and mount /lib/modules"
msgstr ""

#: ../../_doc/developer/system/template-implementation.md:36
#: a5fa6fd068d449d18e151a13aa4b3a88
msgid ""
"*modules.img* – filesystem image of /lib/modules with matching kernel "
"modules and firmware (/lib/firmware/updates is symlinked to "
"/lib/modules/firmware)"
msgstr ""

#: ../../_doc/developer/system/template-implementation.md:38
#: 694a2c83047741f1acad9395517eba86
msgid ""
"Normally kernel \"package\" is common for many VMs (can be set using qvm-"
"prefs). One of them can be set as default (qvm-set-default-kernel) to "
"simplify kernel updates (by default all VMs use the default kernel). All "
"installed kernels are placed in /var/lib/qubes/vm-kernels as separate "
"subdirs. In this case, modules.img is attached to the VM as R/O device."
msgstr ""

#: ../../_doc/developer/system/template-implementation.md:40
#: 63e71e881a5848a488106a429a768420
msgid ""
"There is a special case when the VM can have a custom kernel – when it is "
"updateable (StandaloneVM or TemplateVM) and the kernel is set to \"none\" "
"(by qvm-prefs). In this case the VM uses the kernel from the \"kernels\" VM "
"subdir and modules.img is attached as R/W device. FIXME: \"none\" should be "
"renamed to \"custom\"."
msgstr ""

#: ../../_doc/developer/system/template-implementation.md:42
#: 3f78960f56cf47beb08dd9fed32aa241
msgid "Qubes TemplateVM implementation"
msgstr ""

#: ../../_doc/developer/system/template-implementation.md:44
#: bbfb8e4c6a8049b4be74c7f235a85a5a
msgid ""
"TemplateVM has a shared root.img across all AppVMs that are based on it. "
"This mechanism has some advantages over a simple common device connected to "
"multiple VMs:"
msgstr ""

#: ../../_doc/developer/system/template-implementation.md:46
#: 0f6f5b4772ad48acace65d72d42f0bda
msgid ""
"root.img can be modified while there are AppVMs running – without corrupting"
" the filesystem"
msgstr ""

#: ../../_doc/developer/system/template-implementation.md:47
#: 12492354c0ab474585e8ac8d0a194c0c
msgid ""
"multiple AppVMs that are using different versions of root.img (from various "
"points in time) can be running concurrently"
msgstr ""

#: ../../_doc/developer/system/template-implementation.md:49
#: a07a69d9955348159d3dad701f3c66e4
msgid ""
"There are two layers of the device-mapper snapshot device; the first one "
"enables modifying root.img without stopping the AppVMs and the second one, "
"which is contained in the AppVM, enables temporal modifications to its "
"filesystem. These modifications will be discarded after a restart of the "
"AppVM."
msgstr ""

#: ../../_doc/developer/system/template-implementation.md:51
#: d8623d2236a14f5892664d05f70ffd88
msgid "![TemplateSharing2.png](/attachment/doc/TemplateSharing2.png)"
msgstr ""

#: ../../_doc/developer/system/template-implementation.md:51
#: 053767c0b6f946d89ee6a083a1057c03
msgid "TemplateSharing2.png"
msgstr ""

#: ../../_doc/developer/system/template-implementation.md:53
#: f586078524ac48f2a9ed6ed8d475590f
msgid "Snapshot device in Dom0"
msgstr ""

#: ../../_doc/developer/system/template-implementation.md:55
#: 7d2cb5a2d32943dbbfd9aac56f50486c
msgid "This device consists of:"
msgstr ""

#: ../../_doc/developer/system/template-implementation.md:57
#: 0852ebec14164d87b1fa4b9e2869c823
msgid "root.img – real template filesystem"
msgstr ""

#: ../../_doc/developer/system/template-implementation.md:58
#: 68e281f539bc46ceb8c2e8afaa2bab41
msgid ""
"root-cow.img – differences between the device as seen by AppVM and the "
"current root.img"
msgstr ""

#: ../../_doc/developer/system/template-implementation.md:60
#: 9536b01fe2cc446fb8f45d818bc00326
msgid ""
"The above is achieved through creating device-mapper snapshots for each "
"version of root.img. When an AppVM is started, a xen hotplug script "
"(/etc/xen/scripts/block-snapshot) reads the inode numbers of root.img and "
"root-cow.img; these numbers are used as the snapshot device's name. When a "
"device with the same name exists the new AppVM will use it – therefore, "
"AppVMs based on the same version of root.img will use the same device. Of "
"course, the device-mapper cannot use the files directly – it must be "
"connected through /dev/loop\\*. The same mechanism detects if there is a "
"loop device associated with a file determined by the device and inode "
"numbers – or if creating a new loop device is necessary."
msgstr ""

#: ../../_doc/developer/system/template-implementation.md:62
#: 9e20da1b11cc4c99afbfcacc0eb1ad33
msgid ""
"When an AppVM is stopped the xen hotplug script checks whether the device is"
" still in use – if it is not, the script removes the snapshot and frees the "
"loop device."
msgstr ""

#: ../../_doc/developer/system/template-implementation.md:64
#: df82bb6d633846c2ba81e6513f40daa9
msgid "Changes to template filesystem"
msgstr ""

#: ../../_doc/developer/system/template-implementation.md:66
#: 4694e8c7ce284deba60abb4f78babfec
msgid ""
"In order for the full potential of the snapshot device to be realized, every"
" change in root.img must save the original version of the modified block in "
"root-cow.img. This is achieved by a snapshot-origin device."
msgstr ""

#: ../../_doc/developer/system/template-implementation.md:68
#: 885498a36dab43429fb6e544715fbeed
msgid ""
"When TemplateVM is started, it receives the snapshot-origin device connected"
" as a root device (in read-write mode). Therefore, every change to this "
"device is immediately saved in root.img – but remains invisible to the "
"AppVM, which uses the snapshot."
msgstr ""

#: ../../_doc/developer/system/template-implementation.md:70
#: 92ceb1a7184e46a8b18d6998a279cfab
msgid ""
"When TemplateVM is stopped, the xen script moves root-cow.img to root-"
"cow.img.old and creates a new one (using the `qvm-template-commit` tool). "
"The snapshot device will remain untouched due to the loop device, which uses"
" an actual file on the disk (by inode, not by name). Linux kernel frees the "
"old root-cow.img files as soon as they are unused by all snapshot devices "
"(to be exact, loop devices). The new root-cow.img file will get a new inode "
"number, and so new AppVMs will get new snapshot devices (with different "
"names)."
msgstr ""

#: ../../_doc/developer/system/template-implementation.md:72
#: b49407b822f54a30a278f72ef1dd6639
msgid "Rollback template changes"
msgstr ""

#: ../../_doc/developer/system/template-implementation.md:74
#: 7061020e15c3452fb1ddc26c93a5f6ff
msgid ""
"There is possibility to rollback last template changes. Saved root-"
"cow.img.old contains all changes made during last TemplateVM run. Rolling "
"back changes is done by reverting this \"binary patch\"."
msgstr ""

#: ../../_doc/developer/system/template-implementation.md:76
#: 832ad8aa207c44a68e512108990ffdfb
msgid ""
"This is done using snapshot-merge device-mapper target (available from "
"2.6.34 kernel). It requires that no other snapshot device uses underlying "
"block devices (root.img, root-cow.img via loop device). Because of this all "
"AppVMs based on this template must be halted during this operation."
msgstr ""

#: ../../_doc/developer/system/template-implementation.md:78
#: 81b98315ce274c4b95d5c17355e2a256
msgid "Steps performed by **qvm-revert-template-changes**:"
msgstr ""

#: ../../_doc/developer/system/template-implementation.md:80
#: 1675d03c1b004078a5490390afc54fd8
msgid "Ensure that no other VMs uses this template."
msgstr ""

#: ../../_doc/developer/system/template-implementation.md:81
#: 2438fde1391c4a4cb4380a24e0923b96
msgid ""
"Prepare snapshot device with ***root-cow.img.old*** instead of *root-"
"cow.img* (*/etc/xen/scripts/block-snapshot prepare*)."
msgstr ""

#: ../../_doc/developer/system/template-implementation.md:82
#: 07d4fe90325c41bbb24b033e03d06da5
msgid ""
"Replace *snapshot* device-mapper target with *snapshot-merge*, other "
"parameters (chunk size etc) remains untouched. Now kernel starts merging "
"changes stored in *root-cow.img.old* into *root.img*. d-m device can be used"
" normally (if needed)."
msgstr ""

#: ../../_doc/developer/system/template-implementation.md:83
#: 5c65d4f2b8b74423a14376ed80b7b9b9
msgid ""
"Waits for merge completed: *dmsetup status* shows used snapshot blocks – it "
"should be equal to metadata size when completed."
msgstr ""

#: ../../_doc/developer/system/template-implementation.md:84
#: 46fe684e1ddc482e8f7860fe4f7055d4
msgid "Replace *snapshot-merge* d-m target back to *snapshot*."
msgstr ""

#: ../../_doc/developer/system/template-implementation.md:85
#: 6a96cec8d5ae43a3a9b16c78808623ec
msgid "Cleanup snapshot device (if nobody uses it at the moment)."
msgstr ""

#: ../../_doc/developer/system/template-implementation.md:86
#: e5f3ff601a16426f970b122b2064661d
msgid "Move *root-cow.img.old* to *root-cow.img* (overriding existing file)."
msgstr ""

#: ../../_doc/developer/system/template-implementation.md:88
#: b60f05a1b4f24fb4bdb84cd8496920fd
msgid "Snapshot device in AppVM"
msgstr ""

#: ../../_doc/developer/system/template-implementation.md:90
#: 2029d4c986984253bdc01d76151a39aa
msgid ""
"Root device is exposed to AppVM in read-only mode. AppVM can write only in:"
msgstr ""

#: ../../_doc/developer/system/template-implementation.md:92
#: afa106190a414d918e128622520ad262
msgid ""
"private.img – persistent storage (mounted in /rw) used for /home, /usr/local"
" – in future versions, its use may be extended"
msgstr ""

#: ../../_doc/developer/system/template-implementation.md:93
#: bfd317a914f447e485c3103acd6e5ea4
msgid ""
"volatile.img – temporary storage, which is discarded after an AppVM restart"
msgstr ""

#: ../../_doc/developer/system/template-implementation.md:95
#: e5f19455fd40459b9f95bc4001ec7a67
msgid "volatile.img is divided into two partitions:"
msgstr ""

#: ../../_doc/developer/system/template-implementation.md:97
#: d7133f9fa5c14ff4982250cc7e4a0065
msgid "changes to root device"
msgstr ""

#: ../../_doc/developer/system/template-implementation.md:98
#: fef8cb4ef49d42ada941f380318697ae
msgid "swap partition"
msgstr ""

#: ../../_doc/developer/system/template-implementation.md:100
#: 8356ca75d0ca429e9609dced53f3e350
msgid ""
"Inside of an AppVM, the root device is wrapped by the snapshot in the first "
"partition of volatile.img. Therefore, the AppVM can write anything to its "
"filesystem – however, such changes will be discarded after a restart."
msgstr ""

#: ../../_doc/developer/system/template-implementation.md:102
#: 3db0b7e67de1429ebd58d0267e8ba2cc
msgid "StandaloneVM"
msgstr ""

#: ../../_doc/developer/system/template-implementation.md:104
#: ee25e073ab394be4ae859c877125af31
msgid ""
"Standalone VM enables user to modify root filesystem persistently. It can be"
" created using *--standalone* switch to *qvm-create*."
msgstr ""

#: ../../_doc/developer/system/template-implementation.md:106
#: 4e3ae51ef96c4a568ab6c58d2ca10058
msgid ""
"It is implemented just like TemplateVM (has own root.img connected as R/W "
"device), but no other VMs can be based on it."
msgstr ""
