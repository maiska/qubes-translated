# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2021, test
# This file is distributed under the same license as the qubes-docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: qubes-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-12-15 16:25+0100\n"
"PO-Revision-Date: 2021-12-15 15:09+0000\n"
"Language-Team: German (https://www.transifex.com/otf/teams/56717/de/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: de\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"

#: ../../_doc/developer/debugging/vm-interface.md:14
#: 05451cdabc1a494badf7af5cc9c68a74
msgid ""
"Qubes VM have some settings set by dom0 based on VM settings. There are "
"multiple configuration channels, which includes:"
msgstr ""

#: ../../_doc/developer/debugging/vm-interface.md:16
#: ../../_doc/developer/debugging/vm-interface.md:21
#: 088d6e3698fd4fb78107217eb46aadd7 ff36cb9a741d42c48c572b15cc867bfa
msgid "QubesDB"
msgstr ""

#: ../../_doc/developer/debugging/vm-interface.md:17
#: 2b2b3e50e8a040aca9b3cc50a2a7ec9a
msgid ""
"XenStore (in Qubes 2, data the same as in QubesDB, keys without leading `/`)"
msgstr ""

#: ../../_doc/developer/debugging/vm-interface.md:18
#: 6694ee731eba409a9f6b3304595548ec
msgid "Qubes RPC (called at VM startup, or when configuration changed)"
msgstr ""

#: ../../_doc/developer/debugging/vm-interface.md:19
#: ../../_doc/developer/debugging/vm-interface.md:223
#: 5fb95a06174e41df9b65c908286fac36 e1df56f557884ab282c2f4d4291431d5
msgid "GUI protocol"
msgstr ""

#: ../../_doc/developer/debugging/vm-interface.md:23
#: 161b00a5da8b4e6e851098b1cb0130e7
msgid "Keys exposed by dom0 to VM"
msgstr ""

#: ../../_doc/developer/debugging/vm-interface.md:25
#: 1977f92b32614b2690eb330a9c4d6f94
msgid ""
"`/qubes-vm-type` - VM type, the same as `type` field in `qvm-prefs`. One of "
"`AppVM`, `ProxyVM`, `NetVM`, `TemplateVM`, `HVM`, `TemplateHVM`"
msgstr ""

#: ../../_doc/developer/debugging/vm-interface.md:26
#: 360bdf33d71b45ea9715c3d7581b6a7d
msgid ""
"`/qubes-vm-updatable` - flag whether VM is updatable (whether changes in "
"root.img will survive VM restart). One of `True`, `False`"
msgstr ""

#: ../../_doc/developer/debugging/vm-interface.md:27
#: 721548ef6d224ba183075c363b2e5574
msgid "`/qubes-vm-persistence` - what data do persist between VM restarts:"
msgstr ""

#: ../../_doc/developer/debugging/vm-interface.md:28
#: a381b1c011664bbca599c5bbcb154e94
msgid "`full` - all disks"
msgstr ""

#: ../../_doc/developer/debugging/vm-interface.md:29
#: 26f1571ea1d2499b90073896a9e5c904
msgid "`rw-only` - only `/rw` disk"
msgstr ""

#: ../../_doc/developer/debugging/vm-interface.md:30
#: 2e70dfc837614fa59c9fe4bdbd51d44c
msgid "`none` - none"
msgstr ""

#: ../../_doc/developer/debugging/vm-interface.md:31
#: 3ab59ec7927e408998a6a5260654f9b0
msgid ""
"`/qubes-timezone - name of timezone based on dom0 timezone. For example "
"`Europe/Warsaw`"
msgstr ""

#: ../../_doc/developer/debugging/vm-interface.md:32
#: 97aff84d9ef647e0a3ace314d26f50e0
msgid ""
"`/qubes-keyboard` (deprecated in R4.1) - keyboard layout based on dom0 "
"layout. Its syntax is suitable for `xkbcomp` command (after expanding escape"
" sequences like `\\n` or `\\t`). This is meant only as some default value, "
"VM can ignore this option and choose its own keyboard layout (this is what "
"keyboard setting from Qubes Manager does). This entry is created as part of "
"gui-daemon initialization (so not available when gui-daemon disabled, or not"
" started yet)."
msgstr ""

#: ../../_doc/developer/debugging/vm-interface.md:33
#: 470cfd0114b3497ebb1b6cc5a54cc21f
msgid ""
"`/keyboard-layout` - keyboard layout based on GuiVM layout. Its syntax can "
"be `layout+variant+options`, `layout+variant`, `layout++options` or simply "
"`layout`. For example, `fr+oss`, `pl++compose:caps` or `fr`. This is meant "
"only as some default value, VM can ignore this option and choose its own "
"keyboard layout (this is what keyboard setting from Qubes Manager does)."
msgstr ""

#: ../../_doc/developer/debugging/vm-interface.md:34
#: 7f3f5e150e3f4d35b5b95cf0516308b4
msgid ""
"`/qubes-debug-mode` - flag whether VM has debug mode enabled (qvm-prefs "
"setting). One of `1`, `0`"
msgstr ""

#: ../../_doc/developer/debugging/vm-interface.md:35
#: 820b8219f79945499e48171ba23a3585
msgid ""
"`/qubes-service/SERVICE_NAME` - subtree for VM services controlled from dom0"
" (using the `qvm-service` command or Qubes Manager). One of `1`, `0`. Note "
"that not every service will be listed here, if entry is missing, it means "
"\"use VM default\". A list of currently supported services is in the `qvm-"
"service` man page."
msgstr ""

#: ../../_doc/developer/debugging/vm-interface.md:36
#: dcbdc67b508844db912281b1086a5373
msgid ""
"`/qubes-netmask` - network mask (only when VM has netvm set); currently "
"hardcoded \"255.255.255.0\""
msgstr ""

#: ../../_doc/developer/debugging/vm-interface.md:37
#: f7eac6add52640f6b24ca6677a2032b7
msgid "`/qubes-ip - IP address for this VM (only when VM has netvm set)"
msgstr ""

#: ../../_doc/developer/debugging/vm-interface.md:38
#: 57582d5966284e62b93643c3c7cde38e
msgid ""
"`/qubes-gateway` - default gateway IP (only when VM has netvm set); VM "
"should add host route to this address directly via eth0 (or whatever default"
" interface name is)"
msgstr ""

#: ../../_doc/developer/debugging/vm-interface.md:39
#: 740a50a99cc44a548d968e514a565260
msgid ""
"`/qubes-primary-dns` - primary DNS address (only when VM has netvm set)"
msgstr ""

#: ../../_doc/developer/debugging/vm-interface.md:40
#: ece8a8be4fc84073bc5904e8387c659e
msgid ""
"`/qubes-secondary-dns` - secondary DNS address (only when VM has netvm set)"
msgstr ""

#: ../../_doc/developer/debugging/vm-interface.md:41
#: bed40cad32464c8ea0aa10eaf120ee10
msgid ""
"`/qubes-netvm-gateway` - same as `qubes-gateway` in connected VMs (only when"
" VM serves as network backend - ProxyVM and NetVM)"
msgstr ""

#: ../../_doc/developer/debugging/vm-interface.md:42
#: 6aaf36dd472f4d679627b5e91677c6d2
msgid ""
"`/qubes-netvm-netmask` - same as `qubes-netmask` in connected VMs (only when"
" VM serves as network backend - ProxyVM and NetVM)"
msgstr ""

#: ../../_doc/developer/debugging/vm-interface.md:43
#: d2e4b6c512564d2ea709900ad6c8390a
msgid ""
"`/qubes-netvm-network` - network address (only when VM serves as network "
"backend - ProxyVM and NetVM); can be also calculated from qubes-netvm-"
"gateway and qubes-netvm-netmask"
msgstr ""

#: ../../_doc/developer/debugging/vm-interface.md:44
#: b510afccb5f746cd9c0ca119be9d6a0c
msgid ""
"`/qubes-netvm-primary-dns` - same as `qubes-primary-dns` in connected VMs "
"(only when VM serves as network backend - ProxyVM and NetVM); traffic sent "
"to this IP on port 53 should be redirected to primary DNS server"
msgstr ""

#: ../../_doc/developer/debugging/vm-interface.md:45
#: 2c07179f16a3443ca7b1d3e2003861fb
msgid ""
"`/qubes-netvm-secondary-dns` - same as `qubes-secondary-dns` in connected "
"VMs (only when VM serves as network backend - ProxyVM and NetVM); traffic "
"sent to this IP on port 53 should be redirected to secondary DNS server"
msgstr ""

#: ../../_doc/developer/debugging/vm-interface.md:46
#: da756712c3a546f7a0193d899214ba52
msgid ""
"`/guivm-windows-prefix` - title prefix for any window not originating from "
"another qube. This means windows of applications running in GuiVM itself"
msgstr ""

#: ../../_doc/developer/debugging/vm-interface.md:48
#: 2376f765d1e0475e8084a405a9b7b9fd
msgid "Firewall rules in 3.x"
msgstr ""

#: ../../_doc/developer/debugging/vm-interface.md:50
#: 7d63535dd4354c428e42bd3458dc3846
msgid ""
"QubesDB is also used to configure firewall in ProxyVMs. Rules are stored in "
"separate key for each target VM. Entries:"
msgstr ""

#: ../../_doc/developer/debugging/vm-interface.md:53
#: 5c2e93beb3c94b78870cb097f3bea382
msgid ""
"`/qubes-iptables` - control entry - dom0 writing `reload` here signals "
"`qubes-firewall` service to reload rules"
msgstr ""

#: ../../_doc/developer/debugging/vm-interface.md:54
#: 707f441e7cd44cfbb84a599c684dca96
msgid ""
"`/qubes-iptables-header` - rules not related to any particular VM, should be"
" applied before domains rules"
msgstr ""

#: ../../_doc/developer/debugging/vm-interface.md:55
#: d25db8b230174fbcb58885eae580dc1e
msgid ""
"`/qubes-iptables-domainrules/NNN` - rules for domain `NNN` (arbitrary "
"number) in `iptables-save` format. Rules are self-contained - fill `FORWARD`"
" iptables chain and contains all required matches (source IP address etc), "
"as well as final default action (`DROP`/`ACCEPT`)"
msgstr ""

#: ../../_doc/developer/debugging/vm-interface.md:60
#: 857abcdf00ae4260be9181a826d76051
msgid ""
"VM after applying rules may signal some error, writing a message to `/qubes-"
"iptables-error` key. This does not exclude any other way of communicating "
"problems - like a popup."
msgstr ""

#: ../../_doc/developer/debugging/vm-interface.md:64
#: 58290db26da74417a15670da64d086c2
msgid "Firewall rules in 4.x"
msgstr ""

#: ../../_doc/developer/debugging/vm-interface.md:66
#: a8c0d30535b94158a01ca2131262672b
msgid ""
"QubesDB is also used to configure firewall in ProxyVMs. Each rule is stored "
"as a separate entry, grouped on target VM:"
msgstr ""

#: ../../_doc/developer/debugging/vm-interface.md:69
#: 1f3fce730dbd42f9a2499f53a7e2b937
msgid ""
"`/qubes-firewall/SOURCE_IP` - base tree under which rules are placed. All "
"rules there should be applied to filter traffic coming from `SOURCE_IP`. "
"This can be either IPv4 or IPv6 address. Dom0 will do an empty write to this"
" top level entry after finishing rules update, so VM can setup a watch here "
"to trigger rules reload."
msgstr ""

#: ../../_doc/developer/debugging/vm-interface.md:74
#: 240f7a5bc3a242569b1d4854e33a7a6b
msgid ""
"`/qubes-firewall/SOURCE_IP/policy` - default action if no rule matches: "
"`drop` or `accept`."
msgstr ""

#: ../../_doc/developer/debugging/vm-interface.md:76
#: 15c050ce0ae74f17bd5bf53ec58181c1
msgid ""
"`/qubes-firewall/SOURCE_IP/NNNN` - rule number `NNNN` - decimal number,   "
"padded with zeros. Se below for rule format. All the rules should be   "
"applied in order of rules implied by those numbers. Note that QubesDB   "
"itself does not impose any ordering (you need to sort the rules after   "
"retrieving them). The first rule has number `0000`."
msgstr ""

#: ../../_doc/developer/debugging/vm-interface.md:82
#: 507315d4d8a043f4a6a23f20230b0ba9
msgid ""
"Each rule is a single QubesDB entry, consisting of pairs `key=value` "
"separated by space. QubesDB enforces limit on a single entry length - 3072 "
"bytes. Possible options for a single rule:"
msgstr ""

#: ../../_doc/developer/debugging/vm-interface.md:86
#: eb329cdd1c96458187792d94f3d9618c
msgid "`action`, values: `accept`, `drop`; this is present in every rule"
msgstr ""

#: ../../_doc/developer/debugging/vm-interface.md:87
#: 75f926a965fd432496132f6a9f432b54
msgid ""
"`dst4`, value: destination IPv4 address with a mask; for example: "
"`192.168.0.0/24`"
msgstr ""

#: ../../_doc/developer/debugging/vm-interface.md:88
#: 0e560fa5b40847048a2e879939e95a26
msgid ""
"`dst6`, value: destination IPv6 address with a mask; for example: `2000::/3`"
msgstr ""

#: ../../_doc/developer/debugging/vm-interface.md:89
#: aecc76d33714475181ef53618ce870eb
msgid "`dsthost`, value: DNS hostname of destination host"
msgstr ""

#: ../../_doc/developer/debugging/vm-interface.md:90
#: ec1ac65c5a0d44f186931735c2eec3bd
msgid "`proto`, values: `tcp`, `udp`, `icmp`"
msgstr ""

#: ../../_doc/developer/debugging/vm-interface.md:91
#: ea0c91ff681b47589bd8b3da9a96080e
msgid ""
"`specialtarget`, value: One of predefined target, currently defined values:"
msgstr ""

#: ../../_doc/developer/debugging/vm-interface.md:92
#: 4d87bf1c1fc64cce84505842d2a92ea1
msgid ""
"`dns` - such option should match DNS traffic to default DNS server (but   "
"not any DNS server), on both TCP and UDP"
msgstr ""

#: ../../_doc/developer/debugging/vm-interface.md:94
#: 998d454f470d44ce97dfc28b2692ba61
msgid ""
"`dstports`, value: destination ports range separated with `-`, valid only "
"together with `proto=tcp` or `proto=udp`; for example `1-1024`, `80-80`"
msgstr ""

#: ../../_doc/developer/debugging/vm-interface.md:96
#: 900c15a8f59742788d1a5574beb79294
msgid ""
"`icmptype`, value: numeric (decimal) icmp message type, for example `8` for "
"echo request, valid only together with `proto=icmp`"
msgstr ""

#: ../../_doc/developer/debugging/vm-interface.md:98
#: 715d8333ade24f6a8bb3bb378864c6d2
msgid ""
"`dpi`, value: Deep Packet Inspection protocol (like: HTTP, SSL, SMB, SSH, "
"SMTP) or the default 'NO' as no DPI, only  packet filtering"
msgstr ""

#: ../../_doc/developer/debugging/vm-interface.md:100
#: c9c026e83b1b4292882373347708c480
msgid ""
"Options must appear in the rule in the order listed above. Duplicated "
"options are forbidden."
msgstr ""

#: ../../_doc/developer/debugging/vm-interface.md:103
#: 56990484054749f7bb07830a1b2a99fd
msgid ""
"A rule matches only when all predicates match. Only one of `dst4`, `dst6` or"
" `dsthost` can be used in a single rule."
msgstr ""

#: ../../_doc/developer/debugging/vm-interface.md:106
#: ed24baec6e2843b9b4c58da87b9ce76a
msgid ""
"If tool applying firewall encounters any parse error (unknown option, "
"invalid value, duplicated option, etc), it should drop all the traffic "
"coming from that `SOURCE_IP`, regardless of properly parsed rules."
msgstr ""

#: ../../_doc/developer/debugging/vm-interface.md:110
#: edcb22bc67a84571b3eeb19004bb118f
msgid "Example valid rules:"
msgstr ""

#: ../../_doc/developer/debugging/vm-interface.md:112
#: b16a1babc0b04a67994d4ee54d6b1af9
msgid "`action=accept dst4=8.8.8.8 proto=udp dstports=53-53`"
msgstr ""

#: ../../_doc/developer/debugging/vm-interface.md:113
#: 8ed3003d87514070938bcf9a109a5116
msgid "`action=drop dst6=2a00:1450:4000::/37 proto=tcp`"
msgstr ""

#: ../../_doc/developer/debugging/vm-interface.md:114
#: 23b2b2f599c14167aa6d5ac6980c2c96
msgid "`action=accept specialtarget=dns`"
msgstr ""

#: ../../_doc/developer/debugging/vm-interface.md:115
#: fbf815bcacf848a3acff967d84645926
msgid ""
"`action=drop proto=tcp specialtarget=dns` - drop DNS queries sent using TCP"
msgstr ""

#: ../../_doc/developer/debugging/vm-interface.md:116
#: 73455c373c22461fa5fbdd0beaf0d2f9
msgid "`action=drop`"
msgstr ""

#: ../../_doc/developer/debugging/vm-interface.md:118
#: e2853b2a442a4ee4bbba18840440e729
msgid "Keys set by VM for passing info to dom0"
msgstr ""

#: ../../_doc/developer/debugging/vm-interface.md:120
#: f0a153efa59342fdbeac53c66ae114e3
msgid ""
"`memory/meminfo` (**xenstore**) - used memory (updated by qubes-meminfo-"
"writer), input information for qmemman;"
msgstr ""

#: ../../_doc/developer/debugging/vm-interface.md:121
#: d509d164e3e24af7bf70032ed85964c2
msgid ""
"Qubes 3.x format: 6 lines (EOL encoded as `\\n`), each in format \"FIELD: "
"VALUE kB\"; fields: `MemTotal`, `MemFree`, `Buffers`, `Cached`, `SwapTotal`,"
" `SwapFree`; meaning the same as in `/proc/meminfo` in Linux."
msgstr ""

#: ../../_doc/developer/debugging/vm-interface.md:122
#: 53732384feec40c188f36e4c5d670b3a
msgid "Qubes 4.0+ format: used memory size in the VM, in kbytes"
msgstr ""

#: ../../_doc/developer/debugging/vm-interface.md:123
#: 4d8cd12a50804cacbe7c79fe30f3f28a
msgid ""
"`/qubes-block-devices` - list of block devices exposed by this VM, each "
"device (subdirectory) should be named in a way that VM can attach the device"
" based on it. Each should contain these entries:"
msgstr ""

#: ../../_doc/developer/debugging/vm-interface.md:124
#: ../../_doc/developer/debugging/vm-interface.md:128
#: 2b2ae88690174f21b3784cd91addfe60 0b007b07c7844d4ab3a69757cba8841a
msgid "`desc` - device description (ASCII text)"
msgstr ""

#: ../../_doc/developer/debugging/vm-interface.md:125
#: dfaf99a1337b4c3b857b55d43cb2d615
msgid "`size` - device size in bytes"
msgstr ""

#: ../../_doc/developer/debugging/vm-interface.md:126
#: 90c79a22fbbd4ec8b16923078e8500fc
msgid ""
"`mode` - default connection mode; `r` for read-only, `w` for read-write"
msgstr ""

#: ../../_doc/developer/debugging/vm-interface.md:127
#: 6a663b995271401790fe40d146b9c29d
msgid ""
"`/qubes-usb-devices` - list of USB devices exposed by this VM, each device "
"(subdirectory) should contain:"
msgstr ""

#: ../../_doc/developer/debugging/vm-interface.md:129
#: 1f629456386e48acabafdad1b9538223
msgid "`usb-ver` - USB version (1, 2 or 3)"
msgstr ""

#: ../../_doc/developer/debugging/vm-interface.md:131
#: d3be4ffaee4b40f1943aab2c534fd484
msgid "Qubes RPC"
msgstr ""

#: ../../_doc/developer/debugging/vm-interface.md:133
#: 04f5fd45dd954fc1beeea972d2a36476
msgid "Services called by dom0 to provide some VM configuration:"
msgstr ""

#: ../../_doc/developer/debugging/vm-interface.md:135
#: 1a5ce2fe359e4173942b7b0e6ac46aa2
msgid ""
"`qubes.SetMonitorLayout` - provide list of monitors, one per line. Each line"
" contains four numbers: `width height X Y width_mm height_mm` (physical "
"dimensions - `width_mm` and `height_mm` - are optional)"
msgstr ""

#: ../../_doc/developer/debugging/vm-interface.md:136
#: 83d1996fe89e4a48a2b3a79b814437de
msgid "`qubes.WaitForSession` - called to wait for full VM startup"
msgstr ""

#: ../../_doc/developer/debugging/vm-interface.md:137
#: df88b96d63b44431b52698bb191a05e3
msgid ""
"`qubes.GetAppmenus` - receive appmenus from given VM (template); TODO: "
"describe format here"
msgstr ""

#: ../../_doc/developer/debugging/vm-interface.md:138
#: 4dc425623da349d2b12a6f7c1eb75de4
msgid "`qubes.GetImageRGBA` - receive image/application icon. Protocol:"
msgstr ""

#: ../../_doc/developer/debugging/vm-interface.md:140
#: 0073ea885fe24c4681c6df5b85183172
msgid "Caller sends name of requested icon. This can be one of:"
msgstr ""

#: ../../_doc/developer/debugging/vm-interface.md:141
#: 897b837be7af4c96ab52279ce2db6785
msgid "`xdgicon:NAME` - search for NAME in standard icons theme"
msgstr ""

#: ../../_doc/developer/debugging/vm-interface.md:142
#: c137d02dff7f4104856829fb7c975273
msgid ""
"`-` - get icon data from stdin (the caller), can be prefixed with format "
"name, for example `png:-`"
msgstr ""

#: ../../_doc/developer/debugging/vm-interface.md:143
#: 58f010346ce642bda802588290e7bf39
msgid "file name"
msgstr ""

#: ../../_doc/developer/debugging/vm-interface.md:144
#: 861f8c2facae4bd5a7771f31fc17a247
msgid ""
"The service responds with image dimensions: width and height as decimal "
"numbers, separated with space and with EOL marker at the and; then image "
"data in RGBA format (32 bits per pixel)"
msgstr ""

#: ../../_doc/developer/debugging/vm-interface.md:147
#: 30e61c0def594b339813d4d8f77afd49
msgid ""
"`qubes.SetDateTime` - set VM time, called periodically by dom0 (can be   "
"triggered manually from dom0 by calling `qvm-sync-clock`). The service   "
"receives one line at stdin - time in format of `date -u -Iseconds`, for   "
"example `2015-07-31T16:10:43+0000`."
msgstr ""

#: ../../_doc/developer/debugging/vm-interface.md:151
#: 8b657f3690c145899e612f63dc1bfa42
msgid ""
"`qubes.SetGuiMode` - called in HVM to switch between fullscreen and seamless"
"   GUI mode. The service receives a single word on stdin - either "
"`FULLSCREEN`   or `SEAMLESS`"
msgstr ""

#: ../../_doc/developer/debugging/vm-interface.md:154
#: 7975febe0afb4561a84f59c1720d6f58
msgid ""
"`qubes.ResizeDisk` - called to inform that underlying disk was resized.   "
"Name of disk image is passed on standard input (`root`, `private`, "
"`volatile`,   or other). This is used starting with Qubes 4.0."
msgstr ""

#: ../../_doc/developer/debugging/vm-interface.md:158
#: f0bf0d1fc06c4d229f101b25cac125b9
msgid "Other Qrexec services installed by default:"
msgstr ""

#: ../../_doc/developer/debugging/vm-interface.md:160
#: cccd194a02e64ce3a2d2fdbeb2d042d3
msgid ""
"`qubes.Backup` - store Qubes backup. The service receives location chosen by"
" the user (one line, terminated by `\\n`), the backup archive ([description "
"of backup format](/doc/BackupEmergencyRestoreV2/))"
msgstr ""

#: ../../_doc/developer/debugging/vm-interface.md:163
#: 17456e677b564c49b0028f238d80236d
msgid ""
"`qubes.DetachPciDevice` - service called in reaction to `qvm-pci -d` call on"
" running VM. The service receives one word - BDF of device to detach. When "
"the service call ends, the device will be detached"
msgstr ""

#: ../../_doc/developer/debugging/vm-interface.md:166
#: fc1060e9bdb5462092fadb1628eabae6
msgid ""
"`qubes.Filecopy` - receive some files from other VM. Files sent in [qfile "
"format](/doc/qfilecopy/)"
msgstr ""

#: ../../_doc/developer/debugging/vm-interface.md:167
#: c7bdf52e8f8344aa90a9bd3f7b36ae6f
msgid ""
"`qubes.OpenInVM` - open a file in called VM. Service receives a single file "
"on stdin (in [qfile format](/doc/qfilecopy/). After a file viewer/editor is "
"terminated, if the file was modified, can be sent back (just raw content, "
"without any headers); otherwise service should just terminate without "
"sending anything. This service is used by both `qvm-open-in-vm` and `qvm-"
"open-in-dvm` tools. When called in DispVM, service termination will trigger "
"DispVM cleanup."
msgstr ""

#: ../../_doc/developer/debugging/vm-interface.md:173
#: dc10b6d777864ff6ad0fc042d4a21c89
msgid ""
"`qubes.Restore` - retrieve Qubes backup. The service receives backup "
"location entered by the user (one line, terminated by `\\n`), then should "
"output backup archive in [qfile format](/doc/qfilecopy/) (core-agent-linux "
"component contains `tar2qfile` utility to do the conversion)"
msgstr ""

#: ../../_doc/developer/debugging/vm-interface.md:177
#: 555c2078b0ac4f2d87de56d647fe99c0
msgid ""
"`qubes.SelectDirectory`, `qubes.SelectFile` - services which should show "
"file/directory selection dialog and return (to stdout) a single line "
"containing selected path, or nothing in the case of cancellation"
msgstr ""

#: ../../_doc/developer/debugging/vm-interface.md:180
#: 31ed348db2084194a95d25549e02b7b0
msgid ""
"`qubes.SuspendPre` - service called in every VM with PCI device attached "
"just before system suspend"
msgstr ""

#: ../../_doc/developer/debugging/vm-interface.md:182
#: b2685d19232e43c885a5b1b058862a29
msgid ""
"`qubes.SuspendPost` - service called in every VM with PCI device attached "
"just after system resume"
msgstr ""

#: ../../_doc/developer/debugging/vm-interface.md:184
#: 1b8baf3728884c9996657bb45b7ac828
msgid ""
"`qubes.SyncNtpClock` - service called to trigger network time "
"synchronization. Service should synchronize local VM time and terminate when"
" done."
msgstr ""

#: ../../_doc/developer/debugging/vm-interface.md:186
#: 287c246f9b954208a88b067388b27828
msgid ""
"`qubes.WindowIconUpdater` - service called by VM to send icons of individual"
" windows. The protocol there is simple one direction stream: VM sends window"
" ID followed by icon in `qubes.GetImageRGBA` format, then next window ID "
"etc. VM can send icon for the same window multiple times to replace previous"
" one (for example for animated icons)"
msgstr ""

#: ../../_doc/developer/debugging/vm-interface.md:191
#: 30cf4f7bfc3f45bbaba962b556c03c84
msgid ""
"`qubes.VMShell` - call any command in the VM; the command(s) is passed one "
"per line"
msgstr ""

#: ../../_doc/developer/debugging/vm-interface.md:192
#: 5ff41fb33b6541a192242de6205e4480
msgid "`qubes.VMShell+WaitForSession` waits for full VM startup first"
msgstr ""

#: ../../_doc/developer/debugging/vm-interface.md:193
#: 12425e6dc1ae4cde90470f3402079b30
msgid ""
"`qubes.VMExec` - call any command in the VM, without using shell, the "
"command needs to be passed as argument and encoded as follows:"
msgstr ""

#: ../../_doc/developer/debugging/vm-interface.md:195
#: 7ebfad91270b489a89366f901ded462d
msgid "the executable name and arguments are separated by `+`"
msgstr ""

#: ../../_doc/developer/debugging/vm-interface.md:196
#: edcb8cb3a6c540968198ba85bbcaa800
msgid ""
"everything except alphanumeric characters, `.` and `_` needs to be   escaped"
msgstr ""

#: ../../_doc/developer/debugging/vm-interface.md:198
#: fbb45330064d416d9ce4ced13708f45e
msgid ""
"bytes are escaped as `-HH` (where `HH` is hex code, capital letters only)"
msgstr ""

#: ../../_doc/developer/debugging/vm-interface.md:199
#: c6796b367f58429ebc00bc714defd9ce
msgid "`-` itself can be escaped as `--`"
msgstr ""

#: ../../_doc/developer/debugging/vm-interface.md:200
#: 1bacef0ce57840879f70cb3faa10a377
msgid ""
"example: to run `ls -a /home/user`, use   "
"`qubes.VMExec+ls+--a+-2Fhome-2Fuser`"
msgstr ""

#: ../../_doc/developer/debugging/vm-interface.md:202
#: 056959e51e5e4b2196c780d600ce213f
msgid ""
"`qubes.VMExecGUI` - a variant of `qubes.VMExec` that waits for full VM "
"startup first"
msgstr ""

#: ../../_doc/developer/debugging/vm-interface.md:205
#: b84e384111ae42899f4a33c16d0e05b9
msgid "Services called in GuiVM:"
msgstr ""

#: ../../_doc/developer/debugging/vm-interface.md:207
#: 0b637a8331614114aeeab8002e3b0fb6
msgid ""
"`policy.Ask`, `policy.Notify` - confirmation prompt and notifications for "
"Qubes RPC calls, see [qrexec-policy implementation](/doc/qrexec-"
"internals/#qrexec-policy-implementation) for a detailed description."
msgstr ""

#: ../../_doc/developer/debugging/vm-interface.md:211
#: 4b0e5c6d368f4cb69331f6c2ab991c73
msgid ""
"Currently Qubes still calls few tools in VM directly, not using service "
"abstraction. This will change in the future. Those tools are:"
msgstr ""

#: ../../_doc/developer/debugging/vm-interface.md:214
#: 8d06c7e4e5eb441cb1fc7660910f904e
msgid ""
"`/usr/lib/qubes/qubes-download-dom0-updates.sh` - script to download updates"
" (or new packages to be installed) for dom0 (`qubes-dom0-update` tool)"
msgstr ""

#: ../../_doc/developer/debugging/vm-interface.md:215
#: ce6669ae1f8f42c386d504d9e7253025
msgid ""
"`date -u -Iseconds` - called directly to retrieve time after calling "
"`qubes.SyncNtpClock` service (`qvm-sync-clock` tool)"
msgstr ""

#: ../../_doc/developer/debugging/vm-interface.md:216
#: 320a02ceb04f4eee8d00136024c6a40d
msgid ""
"`nm-online -x` - called before `qubes.SyncNtpClock` service call by `qvm-"
"sync-clock` tool"
msgstr ""

#: ../../_doc/developer/debugging/vm-interface.md:217
#: 7928e81c47474c6eb9e5993c777234ed
msgid ""
"`resize2fs` - called to resize filesystem on /rw partition by `qvm-grow-"
"private` tool"
msgstr ""

#: ../../_doc/developer/debugging/vm-interface.md:218
#: 960e578c78124c2ab1eb4bcf20007fd7
msgid ""
"`gpk-update-viewer` - called by Qubes Manager to display available updates "
"in a TemplateVM"
msgstr ""

#: ../../_doc/developer/debugging/vm-interface.md:219
#: 7a5844f2a51e4cd1b2a92a4b9e74b19a
msgid ""
"`systemctl start qubes-update-check.timer` (and similarly stop) - called "
"when enabling/disabling updates checking in given VM (`qubes-update-check` "
"[qvm-service](/doc/qubes-service/))"
msgstr ""

#: ../../_doc/developer/debugging/vm-interface.md:221
#: 9b04326d24004ebdbd0e0b95a6e41f7d
msgid ""
"Additionally, automatic tests extensively run various commands directly in "
"VMs. We do not plan to change that."
msgstr ""

#: ../../_doc/developer/debugging/vm-interface.md:225
#: 795b71e447e84db8a3238d14bfc9dc5a
msgid ""
"GUI initialization includes passing the whole screen dimensions from dom0 to"
" VM. This will most likely be overwritten by qubes.SetMonitorLayout Qubes "
"RPC call."
msgstr ""
