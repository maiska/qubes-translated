# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2021, test
# This file is distributed under the same license as the qubes-docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: qubes-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-12-15 16:25+0100\n"
"PO-Revision-Date: 2021-12-15 15:09+0000\n"
"Language-Team: German (https://www.transifex.com/otf/teams/56717/de/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: de\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"

#: ../../_doc/developer/debugging/windows-debugging.md:13
#: 5d38bddf15be4501aababf8e3f1d8904
msgid ""
"Debugging Windows code can be tricky in a virtualized environment. The guide"
" below assumes Xen hypervisor and Windows 7 VMs."
msgstr ""

#: ../../_doc/developer/debugging/windows-debugging.md:15
#: 5d2fcc0ba51e4b88bb8b35b1c7c511a3
msgid ""
"User-mode debugging is usually straightforward if it can be done on one "
"machine. Just duplicate your normal debugging environment in the VM."
msgstr ""

#: ../../_doc/developer/debugging/windows-debugging.md:17
#: 801f837b50f740889d0bc49008634c30
msgid ""
"Things get complicated if you need to perform kernel debugging or "
"troubleshoot problems that only manifest on system boot, user logoff or "
"similar. For that you need two Windows VMs: the *host* and the *target*. The"
" *host* will contain [WinDbg](https://msdn.microsoft.com/en-"
"us/library/windows/hardware/ff551063(v=vs.85).aspx) installation, your "
"source code and private symbols. The *target* will run the code being "
"debugged. Both will be linked by virtual serial ports."
msgstr ""

#: ../../_doc/developer/debugging/windows-debugging.md:19
#: 61c1dcacb73d4a8db5b3e8bff43b6d94
msgid ""
"First, you need to prepare separate copies of both *target* and *host* VM "
"configuration files with some changes. Copy the files from "
"**/var/lib/qubes/appvms/vmname/vmname.conf** to some convenient location, "
"let's call them **host.conf** and **target.conf**."
msgstr ""

#: ../../_doc/developer/debugging/windows-debugging.md:20
#: 1a7b4c53cbb54a6580428355e14714cb
msgid ""
"In both copied files add the following line at the end: `serial = 'pty'`. "
"This will make Xen connect VM's serial ports to dom0's ptys."
msgstr ""

#: ../../_doc/developer/debugging/windows-debugging.md:21
#: c6a5dca8a116449ca27d2183cc5a4b32
msgid ""
"From now on you need to start both VMs like this: `qvm-start --custom-"
"config=/your/edited/host.conf host`"
msgstr ""

#: ../../_doc/developer/debugging/windows-debugging.md:22
#: acb55aa885a748239be4460791f5b827
msgid ""
"To connect both VM serial ports together you will either need "
"[socat](http://www.dest-unreach.org/socat/) or a custom utility described "
"later."
msgstr ""

#: ../../_doc/developer/debugging/windows-debugging.md:23
#: e81a124c717f491dbaef4347cd251bb0
msgid ""
"To determine which dom0 pty corresponds to VM's serial port you need to read"
" xenstore, example script below:"
msgstr ""

#: ../../_doc/developer/debugging/windows-debugging.md:33
#: 73abce7bf323475c8d696cc228f5fdac
msgid ""
"Pass it a running VM name and it will output the corresponding pty name."
msgstr ""

#: ../../_doc/developer/debugging/windows-debugging.md:35
#: 94dbd0def3664b0196542d84d6fb4ca6
msgid ""
"To connect both ptys you can use [socat](http://www.dest-unreach.org/socat/)"
" like that:"
msgstr ""

#: ../../_doc/developer/debugging/windows-debugging.md:47
#: 0bbd2155348c42f083d9a70d9e3e3c20
msgid ""
"...but there is a catch. Xen seems to process the traffic that goes through "
"serial ports and changes all **0x0a** bytes into **0x0d, 0x0a** pairs "
"(newline conversion). I didn't find a way to turn that off (setting ptys to "
"raw mode didn't change anything) and it's not mentioned anywhere on the "
"Internet, so maybe it's something on my system. If the above script works "
"for you then you don't need anything more in dom0."
msgstr ""

#: ../../_doc/developer/debugging/windows-debugging.md:49
#: 092096f4380c4e03a8ac6c31d65dc764
msgid ""
"On the *target* system, run `bcdedit /set debug on` on the console to turn "
"on kernel debugging. It defaults to the first serial port."
msgstr ""

#: ../../_doc/developer/debugging/windows-debugging.md:50
#: 59ddd11a09fe47049c72c14ba2e78478
msgid ""
"On the *host* system, install [WinDbg](http://msdn.microsoft.com/en-"
"us/library/windows/hardware/ff551063(v=vs.85).aspx) and start the kernel "
"debug (Ctrl-K), choose **com1** as the debug port."
msgstr ""

#: ../../_doc/developer/debugging/windows-debugging.md:51
#: e53dcbec98014dd8b4eccd92be6c8c67
msgid "Reboot the *target* VM."
msgstr ""

#: ../../_doc/developer/debugging/windows-debugging.md:52
#: ffad05a8d22f46738c3d2ec9c642b311
msgid "Run the above shell script in dom0."
msgstr ""

#: ../../_doc/developer/debugging/windows-debugging.md:53
#: 3982a7ef85db4597950d8b43d24a5b0b
msgid ""
"If everything is fine you should see the proper kernel debugging output in "
"WinDbg. However, if you see something like that:"
msgstr ""

#: ../../_doc/developer/debugging/windows-debugging.md:77
#: c3275bb616994a15b7c6eefa0901b932
msgid ""
"...then you're most likely a victim of the CRLF issue mentioned above. To "
"get around it I wrote a small utility that basically does what socat would "
"do and additionally corrects those replaced bytes in the stream. It's not "
"pretty but it works:"
msgstr ""

#: ../../_doc/developer/debugging/windows-debugging.md:191
#: d1d09f5e311a4b3c806653ad1cae0744
msgid ""
"This utility is a unidirectional relay so you need to run two instances to "
"get duplex communication, like:"
msgstr ""

#: ../../_doc/developer/debugging/windows-debugging.md:201
#: 9dd489f42ab54eff9e248d611ffc941b
msgid "With this everything should be good:"
msgstr ""

#: ../../_doc/developer/debugging/windows-debugging.md:217
#: 80e56fecd8c644c5a277fcc4b976db0e
msgid "Debugging HVMs in the Qubes R4.0"
msgstr ""

#: ../../_doc/developer/debugging/windows-debugging.md:219
#: a74105ac51764ac39d9a56a1687a5d33
msgid ""
"There are two main issues to be adopted to get all things to work in the "
"R4.0."
msgstr ""

#: ../../_doc/developer/debugging/windows-debugging.md:221
#: 3527a6af517b4964996b293ac4b6fbaa
msgid "Add a virtual serial port"
msgstr ""

#: ../../_doc/developer/debugging/windows-debugging.md:223
#: 5c0a98dcdddc445abb256589fe624ece
msgid ""
"Qemu in the stub domain with virtual serial port added in a recommended way "
"(```<serial type=\"pty\"/>```) fails to start (Could not open '/dev/hvc1': "
"No such device). It seems like a lack of multiple xen consoles "
"support/configuration. The only way that I have found is to attach serial "
"port explicitly to the available console."
msgstr ""

#: ../../_doc/developer/debugging/windows-debugging.md:225
#: ccbab25a02b4485db5193af8f28309b2
msgid "Unpack stub domain in dom0:"
msgstr ""

#: ../../_doc/developer/debugging/windows-debugging.md:236
#: 7c35047594bf4b5d851360ee7cddd11f
msgid ""
"Edit Init script to remove last loop and to add \"-serial /dev/hvc0\" to the"
" qemu command line."
msgstr ""

#: ../../_doc/developer/debugging/windows-debugging.md:238
#: 4b6e50857dd24c12bc7a70e5680ee3ad
msgid "Apply changes:"
msgstr ""

#: ../../_doc/developer/debugging/windows-debugging.md:245
#: e9641e2650844e0b83c98ff6ae7a1e22
msgid "Connect two consoles"
msgstr ""

#: ../../_doc/developer/debugging/windows-debugging.md:247
#: 49c7689f273843dca33622d5abb25785
msgid "Run the following script:"
msgstr ""

#: ../../_doc/developer/debugging/windows-debugging.md:261
#: 5b887f2f462b4dd894d85bceb6592799
msgid "Happy debugging!"
msgstr ""
