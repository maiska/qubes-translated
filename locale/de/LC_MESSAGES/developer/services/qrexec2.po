# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2021, test
# This file is distributed under the same license as the qubes-docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: qubes-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-12-15 16:25+0100\n"
"PO-Revision-Date: 2021-12-15 15:10+0000\n"
"Language-Team: German (https://www.transifex.com/otf/teams/56717/de/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: de\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"

#: ../../_doc/developer/services/qrexec2.md:14
#: 32d08fda77004e81940cf745e8db7705
msgid ""
"(*This page is about qrexec v2. For qrexec v3, see [here](/doc/qrexec/).*)"
msgstr ""

#: ../../_doc/developer/services/qrexec2.md:16
#: c545a782fbc44858b6ddb4c9d65d21bb
msgid ""
"Qubes **qrexec** is a framework for implementing inter-VM (incl. Dom0-VM) "
"services. It offers a mechanism to start programs in VMs, redirect their "
"stdin/stdout, and a policy framework to control this all."
msgstr ""

#: ../../_doc/developer/services/qrexec2.md:20
#: 0aa50e34ed954c5b8946520eed98fd18
msgid "Qrexec basics"
msgstr ""

#: ../../_doc/developer/services/qrexec2.md:22
#: c56e6f14fff04dd9b9b4a05c7839c05d
msgid ""
"During each domain creation a process named `qrexec-daemon` is started in "
"dom0, and a process named `qrexec-agent` is started in the VM. They are "
"connected over `vchan` channel."
msgstr ""

#: ../../_doc/developer/services/qrexec2.md:26
#: 94540e1b5315412e84bf1ef6551579b2
msgid ""
"Typically, the first thing that a `qrexec-client` instance does is to send a"
" request to `qrexec-agent` to start a process in the VM. From then on, the "
"stdin/stdout/stderr from this remote process will be passed to the `qrexec-"
"client` process."
msgstr ""

#: ../../_doc/developer/services/qrexec2.md:31
#: f957e6c1884d4a3182575332a71ce56b
msgid ""
"E.g., to start a primitive shell in a VM type the following in Dom0 console:"
msgstr ""

#: ../../_doc/developer/services/qrexec2.md:37
#: b576aec530a545d5b762f7a482dc2871
msgid ""
"The string before first semicolon specifies what user to run the command as."
msgstr ""

#: ../../_doc/developer/services/qrexec2.md:39
#: c3d4ddeea773481b8b9daf0aebb2fd55
msgid ""
"Adding `-e` on the `qrexec-client` command line results in mere command "
"execution (no data passing), and `qrexec-client` exits immediately after "
"sending the execution request."
msgstr ""

#: ../../_doc/developer/services/qrexec2.md:43
#: 1f2740cf64f744feaee43ace4f8039ae
msgid ""
"There is also the `-l <local program>` flag, which directs `qrexec-client` "
"to pass stdin/stdout of the remote program not to its stdin/stdout, but to "
"the (spawned for this purpose) `<local program>`."
msgstr ""

#: ../../_doc/developer/services/qrexec2.md:47
#: cbaec640d9b940e197ee7451b1449558
msgid ""
"The `qvm-run` command is heavily based on `qrexec-client`. It also takes "
"care of additional activities (e.g., starting the domain, if it is not up "
"yet, and starting the GUI daemon). Thus, it is usually more convenient to "
"use `qvm-run`."
msgstr ""

#: ../../_doc/developer/services/qrexec2.md:51
#: 8a765ee0f11f4169913bb6bb306188ab
msgid ""
"There can be almost arbitrary number of `qrexec-client` processes for a "
"domain (i.e., `qrexec-client` processes connected to the same `qrexec-"
"daemon`); their data is multiplexed independently."
msgstr ""

#: ../../_doc/developer/services/qrexec2.md:55
#: dde53548911b4f2aa340473d9715a707
msgid ""
"There is a similar command line utility available inside Linux AppVMs (note "
"the `-vm` suffix): `qrexec-client-vm` that will be described in subsequent "
"sections."
msgstr ""

#: ../../_doc/developer/services/qrexec2.md:59
#: 4151f5d3a731467e8e64d7e84c08682c
msgid "Qubes RPC services"
msgstr ""

#: ../../_doc/developer/services/qrexec2.md:61
#: 57106a8bc49d45ca9b97694cad7ab7cd
msgid ""
"Apart from simple Dom0-\\>VM command executions, as discussed above, it is "
"also useful to have more advanced infrastructure for controlled inter-VM "
"RPC/services. This might be used for simple things like inter-VM file copy "
"operations, as well as more complex tasks like starting a DispVM, and "
"requesting it to do certain operations on a handed file(s)."
msgstr ""

#: ../../_doc/developer/services/qrexec2.md:67
#: 51d37b63da324547a89e6c4d8ff2fee7
msgid ""
"Instead of implementing complex RPC-like mechanisms for inter-VM "
"communication, Qubes takes a much simpler and pragmatic approach and aims to"
" only provide simple *pipes* between the VMs, plus ability to request *pre-"
"defined* programs (servers) to be started on the other end of such pipes, "
"and a centralized policy (enforced by the `qrexec-policy` process running in"
" dom0) which says which VMs can request what services from what VMs."
msgstr ""

#: ../../_doc/developer/services/qrexec2.md:74
#: 70ea0ffba0d242adb4128f2518de641a
msgid ""
"Thanks to the framework and automatic stdin/stdout redirection, RPC programs"
" are very simple; both the client and server just use their stdin/stdout to "
"pass data. The framework does all the inner work to connect these file "
"descriptors to each other via `qrexec-daemon` and `qrexec-agent`. "
"Additionally, DispVMs are tightly integrated; RPC to a DispVM is a simple "
"matter of using a magic `$dispvm` keyword as the target VM name."
msgstr ""

#: ../../_doc/developer/services/qrexec2.md:81
#: b9be14650795476dbe4e8d3baa37958c
msgid ""
"All services in Qubes are identified by a single string, which by convention"
" takes a form of `qubes.ServiceName`. Each VM can provide handlers for each "
"of the known services by providing a file in `/etc/qubes-rpc/` directory "
"with the same name as the service it is supposed to handle. This file will "
"then be executed by the qrexec service, if the dom0 policy allowed the "
"service to be requested (see below). Typically, the files in `/etc/qubes-"
"rpc/` contain just one line, which is a path to the specific binary that "
"acts as a server for the incoming request, however they might also be the "
"actual executable themselves. Qrexec framework is careful about connecting "
"the stdin/stdout of the server process with the corresponding stdin/stdout "
"of the requesting process in the requesting VM (see example Hello World "
"service described below)."
msgstr ""

#: ../../_doc/developer/services/qrexec2.md:93
#: f381a818dda64634aef7f21b8f67f071
msgid "Qubes RPC administration"
msgstr ""

#: ../../_doc/developer/services/qrexec2.md:95
#: e2b297fed1be4da8ba3c4239b2e44be7
msgid ""
"Besides each VM needing to provide explicit programs to serve each supported"
" service, the inter-VM service RPC is also governed by a central policy in "
"Dom0."
msgstr ""

#: ../../_doc/developer/services/qrexec2.md:98
#: c083c501fe7b4a24808c2dd4127a0416
msgid ""
"In dom0, there is a bunch of files in `/etc/qubes-rpc/policy/` directory, "
"whose names describe the available RPC actions; their content is the RPC "
"access policy database. Some example of the default services in Qubes are:"
msgstr ""

#: ../../_doc/developer/services/qrexec2.md:114
#: 80023c117d474543a7fb08ad2a669207
msgid "These files contain lines with the following format:"
msgstr ""

#: ../../_doc/developer/services/qrexec2.md:120
#: 1adf07fa976548cdab0b1b88bf45d897
msgid ""
"You can specify `srcvm` and `destvm` by name, or by one of `$anyvm`, "
"`$dispvm`, `dom0` reserved keywords (note string `dom0` does not match the "
"`$anyvm` pattern; all other names do). Only `$anyvm` keyword makes sense in "
"the `srcvm` field (service calls from dom0 are currently always allowed, "
"`$dispvm` means \"new VM created for this particular request\" - so it is "
"never a source of request). Currently, there is no way to specify source VM "
"by type, but this is planned for Qubes R3."
msgstr ""

#: ../../_doc/developer/services/qrexec2.md:128
#: 8d479ef17ec546eda6805c2c786b27ac
msgid ""
"Whenever a RPC request for service named \"XYZ\" is received, the first line"
" in `/etc/qubes-rpc/policy/XYZ` that matches the actual `srcvm`/`destvm` is "
"consulted to determine whether to allow RPC, what user account the program "
"should run in target VM under, and what VM to redirect the execution to. If "
"the policy file does not exist, user is prompted to create one *manually*; "
"if still there is no policy file after prompting, the action is denied."
msgstr ""

#: ../../_doc/developer/services/qrexec2.md:135
#: 3768ffe060f34e6a879d31a7d5e84e99
msgid ""
"On the target VM, the `/etc/qubes-rpc/XYZ` must exist, containing the file "
"name of the program that will be invoked."
msgstr ""

#: ../../_doc/developer/services/qrexec2.md:138
#: 02276cd849c3450c8301203650478f2f
msgid "Requesting VM-VM (and VM-Dom0) services execution"
msgstr ""

#: ../../_doc/developer/services/qrexec2.md:140
#: 847ed53069f042cc8fcfa4a49254cc45
msgid ""
"In a src VM, one should invoke the qrexec client via the following command:"
msgstr ""

#: ../../_doc/developer/services/qrexec2.md:146
#: 10fd30e82f8b461b96577794c57b4cb4
msgid ""
"Note that only stdin/stdout is passed between RPC server and client -- "
"notably, no cmdline argument are passed."
msgstr ""

#: ../../_doc/developer/services/qrexec2.md:149
#: a8cba94b31f84546a6a7955c01315f05
msgid ""
"The source VM name can be accessed in the server process via "
"`QREXEC_REMOTE_DOMAIN` environment variable. (Note the source VM has *no* "
"control over the name provided in this variable--the name of the VM is "
"provided by dom0, and so is trusted.)"
msgstr ""

#: ../../_doc/developer/services/qrexec2.md:154
#: 29148dd1f9fa4e51b912455a2634378a
msgid ""
"By default, stderr of client and server is logged to respective "
"`/var/log/qubes/qrexec.XID` files, in each of the VM."
msgstr ""

#: ../../_doc/developer/services/qrexec2.md:157
#: e0ce447e74264a17a872c73e5ff4f024
msgid ""
"Be very careful when coding and adding a new RPC service! Any vulnerability "
"in a RPC server can be fatal to security of the target VM!"
msgstr ""

#: ../../_doc/developer/services/qrexec2.md:160
#: 17e041d377984a2888b5690e1fe6b5b6
msgid ""
"If requesting VM-VM (and VM-Dom0) services execution *without cmdline "
"helper*, connect directly to `/var/run/qubes/qrexec-agent-fdpass` socket as "
"described [below](#all-the-pieces-together-at-work)."
msgstr ""

#: ../../_doc/developer/services/qrexec2.md:164
#: b226fdf3d13147d9b1ea43f9440d9229
msgid "Revoking \"Yes to All\" authorization"
msgstr ""

#: ../../_doc/developer/services/qrexec2.md:166
#: e7d3660082134f859dc5dd7a75afa94a
msgid ""
"Qubes RPC policy supports an \"ask\" action, that will prompt the user "
"whether a given RPC call should be allowed. It is set as default for "
"services such as inter-VM file copy. A prompt window launches in dom0, that "
"gives the user option to click \"Yes to All\", which allows the action and "
"adds a new entry to the policy file, which will unconditionally allow "
"further calls for given (service, srcVM, dstVM) tuple."
msgstr ""

#: ../../_doc/developer/services/qrexec2.md:173
#: d6c176615e7d439b84a38649b4b66bc9
msgid ""
"In order to remove such authorization, issue this command from a Dom0 "
"terminal (example below for `qubes.Filecopy` service):"
msgstr ""

#: ../../_doc/developer/services/qrexec2.md:180
#: fb8b5ab4d2b94eefabe286ce08aaba2f
msgid ""
"and then remove any line(s) ending in \"allow\" (before the first `##` "
"comment) which are the \"Yes to All\" results."
msgstr ""

#: ../../_doc/developer/services/qrexec2.md:183
#: 28ad83ba0c15451094d91b228673e4db
msgid ""
"A user might also want to set their own policies in this section. This may "
"mostly serve to prevent the user from mistakenly copying files or text from "
"a trusted to untrusted domain, or vice-versa."
msgstr ""

#: ../../_doc/developer/services/qrexec2.md:187
#: cd9829de466f44f6927f46b530a43813
msgid "Qubes RPC \"Hello World\" service"
msgstr ""

#: ../../_doc/developer/services/qrexec2.md:189
#: 94b0e0e77cd449be899dd16567f6c8f4
msgid ""
"We will show the necessary files to create a simple RPC call that adds two "
"integers on the target VM and returns back the result to the invoking VM."
msgstr ""

#: ../../_doc/developer/services/qrexec2.md:192
#: b1c179914704467cb95baaf378ef0daf
msgid "Client code on source VM (`/usr/bin/our_test_add_client`)"
msgstr ""

#: ../../_doc/developer/services/qrexec2.md:200
#: f7efd9f34cec4eabb2b76cd109b28aa5
msgid "Server code on target VM (`/usr/bin/our_test_add_server`)"
msgstr ""

#: ../../_doc/developer/services/qrexec2.md:208
#: 82c27153b20944fe84c521b76c0416d1
msgid "Policy file in dom0 (`/etc/qubes-rpc/policy/test.Add`)"
msgstr ""

#: ../../_doc/developer/services/qrexec2.md:214
#: e6b6dc4ce9484c3098917c002bd6cf2d
msgid "Server path definition on target VM (`/etc/qubes-rpc/test.Add`)"
msgstr ""

#: ../../_doc/developer/services/qrexec2.md:220
#: 294b88e4ba284a39bf8f143c3df1ecd9
msgid "To test this service, run the following in the source VM:"
msgstr ""

#: ../../_doc/developer/services/qrexec2.md:226
#: b89ac6e33b4049cfb345f0ff7ffc4c5a
msgid ""
"and we should get \"3\" as answer, provided dom0 policy allows the call to "
"pass through, which would happen after we click \"Yes\" in the popup that "
"should appear after the invocation of this command. If we changed the policy"
" from \"ask\" to \"allow\", then no popup should be presented, and the call "
"will always be allowed."
msgstr ""

#: ../../_doc/developer/services/qrexec2.md:232
#: 9dab0b82e0874cff8fb4267f37f5f0a3
msgid ""
"**Note:** For a real world example of writing a qrexec service, see this "
"[blog post](https://blog.invisiblethings.org/2013/02/21/converting-"
"untrusted-pdfs-into-trusted.html)."
msgstr ""

#: ../../_doc/developer/services/qrexec2.md:235
#: 3a7cb199b1954554884649c4ef0f3142
msgid "More high-level RPCs?"
msgstr ""

#: ../../_doc/developer/services/qrexec2.md:237
#: 55b345b99af64946808969a211b5c2d0
msgid ""
"As previously noted, Qubes aims to provide mechanisms that are very simple "
"and thus with very small attack surface. This is the reason why the inter-VM"
" RPC framework is very primitive and doesn't include any serialization or "
"other function arguments passing, etc. We should remember, however, that "
"users/app developers are always free to run more high-level RPC protocols on"
" top of qrexec. Care should be taken, however, to consider potential attack "
"surfaces that are exposed to untrusted or less trusted VMs in that case."
msgstr ""

#: ../../_doc/developer/services/qrexec2.md:245
#: dbb030dd04534189b104e29898f2d655
msgid "Qubes RPC internals"
msgstr ""

#: ../../_doc/developer/services/qrexec2.md:247
#: c787d00d923a434985c5ec122474e134
msgid ""
"(*This is about the implementation of qrexec v2. For the implementation of "
"qrexec v3, see [here](/doc/qrexec-internals/). Note that the user API in v3 "
"is backward compatible: qrexec apps written for Qubes R2 should run without "
"modification on Qubes R3.*)"
msgstr ""

#: ../../_doc/developer/services/qrexec2.md:252
#: 2aea2bd9561b41278528d70b2d570260
msgid "Dom0 tools implementation"
msgstr ""

#: ../../_doc/developer/services/qrexec2.md:254
#: ../../_doc/developer/services/qrexec2.md:267
#: f0c35cb74b4847989c5e28db9f55b95b 68cde1af8000420ab07eed2e77706c48
msgid "Players:"
msgstr ""

#: ../../_doc/developer/services/qrexec2.md:256
#: 8ef11defba464e45a88cfc81373a205c
msgid ""
"`/usr/lib/qubes/qrexec-daemon`: started by mgmt stack (qubes.py) when a VM "
"is started."
msgstr ""

#: ../../_doc/developer/services/qrexec2.md:258
#: 1aaae081c0a24a41b96fdf972fc95b7b
msgid ""
"`/usr/lib/qubes/qrexec-policy`: internal program used to evaluate the policy"
" file and making the 2nd half of the connection."
msgstr ""

#: ../../_doc/developer/services/qrexec2.md:260
#: 4d71efd5f6ec4ec89d18573e02e14f33
msgid ""
"`/usr/lib/qubes/qrexec-client`: raw command line tool that talks to the "
"daemon via unix socket (`/var/run/qubes/qrexec.XID`)"
msgstr ""

#: ../../_doc/developer/services/qrexec2.md:263
#: 5d1d1df42dcb4256afacefb3ad52ca2e
msgid "**Note:** None of the above tools are designed to be used by users."
msgstr ""

#: ../../_doc/developer/services/qrexec2.md:265
#: edbed996d5464b63bf4ec4747ed16a8e
msgid "Linux VMs implementation"
msgstr ""

#: ../../_doc/developer/services/qrexec2.md:269
#: 7f9307853d0446a087453ff0feb2195a
msgid "`/usr/lib/qubes/qrexec-agent`: started by VM bootup scripts, a daemon."
msgstr ""

#: ../../_doc/developer/services/qrexec2.md:270
#: 2193db7fa1684fdeb815c0f6c1483b7d
msgid ""
"`/usr/lib/qubes/qubes-rpc-multiplexer`: executes the actual service program,"
" as specified in VM's `/etc/qubes-rpc/qubes.XYZ`."
msgstr ""

#: ../../_doc/developer/services/qrexec2.md:272
#: 63bee3633f3c436c9b8d734004ab7719
msgid ""
"`/usr/lib/qubes/qrexec-client-vm`: raw command line tool that talks to the "
"agent."
msgstr ""

#: ../../_doc/developer/services/qrexec2.md:275
#: ../../_doc/developer/services/qrexec2.md:291
#: ced09be182854afca6d3e9fa685d257e 23a30c05b45e41f1ac897e439857eb88
msgid ""
"**Note:** None of the above tools are designed to be used by users. `qrexec-"
"client-vm` is designed to be wrapped up by Qubes apps."
msgstr ""

#: ../../_doc/developer/services/qrexec2.md:278
#: 6907d5101a00400982d51f073cbac947
msgid "Windows VMs implementation"
msgstr ""

#: ../../_doc/developer/services/qrexec2.md:280
#: 0d1c869e52a24287a543c9e9400b04f3
msgid ""
"`%QUBES_DIR%` is the installation path (`c:\\Program Files\\Invisible Things"
" Lab\\Qubes OS Windows Tools` by default)."
msgstr ""

#: ../../_doc/developer/services/qrexec2.md:283
#: 25dbbc2b745c400da43bda8a6266a9b6
msgid ""
"`%QUBES_DIR%\\bin\\qrexec-agent.exe`: runs as a system service. Responsible "
"both for raw command execution and interpreting RPC service requests."
msgstr ""

#: ../../_doc/developer/services/qrexec2.md:285
#: 452702a86eba4722a878612057d5adc9
msgid ""
"`%QUBES_DIR%\\qubes-rpc`: directory with `qubes.XYZ` files that contain "
"commands for executing RPC services. Binaries for the services are contained"
" in `%QUBES_DIR%\\qubes-rpc-services`."
msgstr ""

#: ../../_doc/developer/services/qrexec2.md:288
#: bd8715ad6a294f2b97f828d0322786f6
msgid ""
"`%QUBES_DIR%\\bin\\qrexec-client-vm`: raw command line tool that talks to "
"the agent."
msgstr ""

#: ../../_doc/developer/services/qrexec2.md:294
#: dfce79f151d8488b8c42ec94c4bf5af8
msgid "All the pieces together at work"
msgstr ""

#: ../../_doc/developer/services/qrexec2.md:296
#: f7e464c200c5486c8d3f03b70621c891
msgid ""
"**Note:** This section is not needed to use qrexec for writing Qubes apps. "
"Also note the [qrexec framework implemention in Qubes R3](/doc/qrexec3/) "
"significantly differs from what is described in this section."
msgstr ""

#: ../../_doc/developer/services/qrexec2.md:300
#: 17fba24f044c47219430dd6baf5647e1
msgid ""
"The VM-VM channels in Qubes R2 are made via \"gluing\" two VM-Dom0 and "
"Dom0-VM vchan connections:"
msgstr ""

#: ../../_doc/developer/services/qrexec2.md:303
#: 1a5076abc5d44591ac61c40d98da19b9
msgid "![qrexec2-internals.png](/attachment/doc/qrexec2-internals.png)"
msgstr ""

#: ../../_doc/developer/services/qrexec2.md:303
#: 4a367d6342054636a3e77ab09803943d
msgid "qrexec2-internals.png"
msgstr ""

#: ../../_doc/developer/services/qrexec2.md:305
#: 84ed583ab7624074ae394642bb3b3b0d
msgid ""
"Note that Dom0 never examines the actual data flowing in neither of the two "
"vchan connections."
msgstr ""

#: ../../_doc/developer/services/qrexec2.md:308
#: 9a501a0316844342884917e74a7bd9fd
msgid ""
"When a user in a source VM executes `qrexec-client-vm` utility, the "
"following steps are taken:"
msgstr ""

#: ../../_doc/developer/services/qrexec2.md:311
#: 41eb408b208f425bb838b3ab454a578c
msgid ""
"`qrexec-client-vm` connects to `qrexec-agent`'s `/var/run/qubes/qrexec-"
"agent-fdpass` unix socket 3 times. Reads 4 bytes from each of them, which is"
" the fd number of the accepted socket in agent. These 3 integers, in text, "
"concatenated, form \"connection identifier\" (CID)"
msgstr ""

#: ../../_doc/developer/services/qrexec2.md:315
#: 38fbf70694d94fc1b44c64da05278762
msgid ""
"`qrexec-client-vm` writes to `/var/run/qubes/qrexec-agent` fifo a blob, "
"consisting of target vmname, rpc action, and CID"
msgstr ""

#: ../../_doc/developer/services/qrexec2.md:317
#: e00d3048c0f148e3b4f21bf4b6a586eb
msgid ""
"`qrexec-client-vm` executes the rpc client, passing the above mentioned unix"
" sockets as process stdin/stdout, and optionally stderr (if the "
"`PASS_LOCAL_STDERR` env variable is set)"
msgstr ""

#: ../../_doc/developer/services/qrexec2.md:320
#: 7bc24a8b5a544f62b7a46bc4c69b4c74
msgid ""
"`qrexec-agent` passes the blob to `qrexec-daemon`, via "
"`MSG_AGENT_TO_SERVER_TRIGGER_CONNECT_EXISTING` message over vchan"
msgstr ""

#: ../../_doc/developer/services/qrexec2.md:322
#: f833e77797294e5395739c99e8119524
msgid ""
"`qrexec-daemon` executes `qrexec-policy`, passing source vmname, target "
"vmname, rpc action, and CID as cmdline arguments"
msgstr ""

#: ../../_doc/developer/services/qrexec2.md:324
#: d41ea22fcaa74a8c9804601a62a0572b
msgid ""
"`qrexec-policy` evaluates the policy file. If successful, creates a pair of "
"`qrexec-client` processes, whose stdin/stdout are cross-connected."
msgstr ""

#: ../../_doc/developer/services/qrexec2.md:326
#: caa2ac6017374efcbd9fec60718ddf48
msgid ""
"The first `qrexec-client` connects to the src VM, using the `-c ClientID` "
"parameter, which results in not creating a new process, but connecting to "
"the existing process file descriptors (these are the fds of unix socket "
"created in step 1)."
msgstr ""

#: ../../_doc/developer/services/qrexec2.md:330
#: 337fc85f68f3459bbc3339abd216c775
msgid ""
"The second `qrexec-client` connects to the target VM, and executes `qubes-"
"rpc-multiplexer` command there with the rpc action as the cmdline argument. "
"Finally, `qubes-rpc-multiplexer` executes the correct rpc server on the "
"target."
msgstr ""

#: ../../_doc/developer/services/qrexec2.md:334
#: 5b39a3f534f54e539d8548c5bf50a90a
msgid ""
"In the above step, if the target VM is `$dispvm`, the DispVM is created via "
"the `qfile-daemon-dvm` program. The latter waits for the `qrexec-client` "
"process to exit, and then destroys the DispVM."
msgstr ""

#: ../../_doc/developer/services/qrexec2.md:338
#: 2a23ccbe12174e5cb65a03d2c106c31c
msgid "*TODO: Protocol description (\"wire-level\" spec)*"
msgstr ""
