# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2021, test
# This file is distributed under the same license as the qubes-docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: qubes-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-12-15 16:25+0100\n"
"PO-Revision-Date: 2021-12-15 15:10+0000\n"
"Language-Team: German (https://www.transifex.com/otf/teams/56717/de/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: de\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"

#: ../../_doc/developer/services/disposablevm-implementation.md:14
#: 33db997b49a946569e632637ea68ee68
msgid "**Note: The content below applies to Qubes R3.2.**"
msgstr ""

#: ../../_doc/developer/services/disposablevm-implementation.md:16
#: 3b7b7cab630a44c1a4faa21924eeb8c5
msgid "DisposableVM image preparation"
msgstr ""

#: ../../_doc/developer/services/disposablevm-implementation.md:19
#: 4b271beca1af4b06af7df856e2642199
msgid ""
"DisposableVM is not started like other VMs, by executing equivalent of `xl "
"create` - it would be too slow. Instead, DisposableVM are started by restore"
" from a savefile."
msgstr ""

#: ../../_doc/developer/services/disposablevm-implementation.md:21
#: 9fd0660807334887bcbd33da657c9672
msgid ""
"Preparing a savefile is done by "
"`/usr/lib/qubes/qubes_prepare_saved_domain.sh` script. It takes two "
"mandatory arguments, appvm name (APPVM) and the savefile name, and optional "
"path to \"prerun\" script. The script executes the following steps:"
msgstr ""

#: ../../_doc/developer/services/disposablevm-implementation.md:23
#: 3114fe9deb80439abcd0580412815e73
msgid "APPVM is started by `qvm-start`"
msgstr ""

#: ../../_doc/developer/services/disposablevm-implementation.md:24
#: 13f063d0f4184a409a4971c985bda59b
msgid ""
"xenstore key `/local/domain/appvm_domain_id/qubes_save_request` is created"
msgstr ""

#: ../../_doc/developer/services/disposablevm-implementation.md:25
#: 0df0390093bd46988151077fe2ed824c
msgid ""
"if prerun script was specified, copy it to `qubes_save_script` xenstore key"
msgstr ""

#: ../../_doc/developer/services/disposablevm-implementation.md:26
#: 568856d289314e45b2f8d545c02a66c2
msgid "wait for the `qubes_used_mem` key to appear"
msgstr ""

#: ../../_doc/developer/services/disposablevm-implementation.md:27
#: 6af660841e5a42f5ae9a558df55b92a6
msgid ""
"(in APPVM) APPVM boots normally, up to the point in `/etc/init.d/qubes_core`"
" script when the presence of `qubes_save_request` key is tested. If it "
"exists, then"
msgstr ""

#: ../../_doc/developer/services/disposablevm-implementation.md:28
#: 02287ccf8ae74dbfa78f546b03fc3897
msgid ""
"(in APPVM) if exists, prerun script is retrieved from the respective "
"xenstore key and executed. This preloads filesystem cache with useful "
"applications, so that they will start faster."
msgstr ""

#: ../../_doc/developer/services/disposablevm-implementation.md:29
#: 1f0247f4a52c41808e72afbd476ec193
msgid ""
"(in APPVM) the amount of used memory is stored to `qubes_used_mem` xenstore "
"key"
msgstr ""

#: ../../_doc/developer/services/disposablevm-implementation.md:30
#: 8bac3ffef8dc4929a395cf9205dd4edc
msgid ""
"(in APPVM) busy-waiting for `qubes_restore_complete` xenstore key to appear"
msgstr ""

#: ../../_doc/developer/services/disposablevm-implementation.md:32
#: 1483ba1fbbbf45d2810a4dc1271f6060
msgid ""
"when `qubes_used_mem` key appears, the domain memory is reduced to this "
"amount, to make the savefile smaller."
msgstr ""

#: ../../_doc/developer/services/disposablevm-implementation.md:33
#: ddbf26af1bb14382960a6c7f61728fb1
msgid "APPVM private image is detached"
msgstr ""

#: ../../_doc/developer/services/disposablevm-implementation.md:34
#: 0abd03af051b4af6bf93f78b0ccf6207
msgid "the domain is saved via `xl save`"
msgstr ""

#: ../../_doc/developer/services/disposablevm-implementation.md:35
#: 9e28d5a630974a43a6cdaa48b82be310
msgid ""
"the COW file volatile.img (cow for root fs and swap) is packed to "
"`saved_cows.tar` archive"
msgstr ""

#: ../../_doc/developer/services/disposablevm-implementation.md:37
#: 7fe6cc64e21a460aa9f30e46398a46ad
msgid ""
"The `qubes_prepare_saved_domain.sh` script is lowlevel. It is usually called"
" by `qvm-create-default-dvm` script, that takes care of creating a special "
"AppVM (named template\\_name-dvm) to be passed to "
"`qubes_prepare_saved_domain.sh`, as well as copying the savefile to /dev/shm"
" (the latter action is not done if the `/var/lib/qubes/dvmdata/dont_use_shm`"
" file exists)."
msgstr ""

#: ../../_doc/developer/services/disposablevm-implementation.md:39
#: c8f15d5734254d1392f45e878338a801
msgid "Restoring a DisposableVM from the savefile"
msgstr ""

#: ../../_doc/developer/services/disposablevm-implementation.md:42
#: 441e398a18c9431eb5b09c9a052723bd
msgid ""
"Normally, disposable VM is created when qubes rpc request with target "
"*\\$dispvm* is received. Then, as a part of rpc connection setup, the "
"`qfile-daemon-dvm` program is executed; it executes "
"`/usr/lib/qubes/qubes_restore` program. It is crucial that this program "
"executes quickly, to make DisposableVM creation overhead bearable for the "
"user. Its main steps are:"
msgstr ""

#: ../../_doc/developer/services/disposablevm-implementation.md:44
#: 73bcf07e8dfd446b9f49275ea5ce5268
msgid ""
"modify the savefile so that the VM name, VM UUID, MAC address and IP address"
" are unique"
msgstr ""

#: ../../_doc/developer/services/disposablevm-implementation.md:45
#: fd54e8a584a24149a4b4928dde769289
msgid "restore the COW files from the `saved_cows.tar`"
msgstr ""

#: ../../_doc/developer/services/disposablevm-implementation.md:46
#: 57b5213f5c484a9b9a6d6ab796d48471
msgid ""
"create the `/var/run/qubes/fast_block_attach` file, whose presence tells the"
" `/etc/xen/scripts/block` script to bypass some redundant checks and execute"
" as fast as possible."
msgstr ""

#: ../../_doc/developer/services/disposablevm-implementation.md:47
#: 41c535cc218c49e69fdf5527a2fa982d
msgid "execute `xl restore` in order to restore a domain."
msgstr ""

#: ../../_doc/developer/services/disposablevm-implementation.md:48
#: 905c3dc194534afeb54488babd2e8f96
msgid ""
"create the same xenstore keys as normally created when AppVM boots (e.g. "
"`qubes_ip`)"
msgstr ""

#: ../../_doc/developer/services/disposablevm-implementation.md:49
#: 6c20ec5e3e84461fa5f0cfb286ea03ee
msgid ""
"create the `qubes_restore_complete` xenstore key. This allows the boot "
"process in DisposableVM to continue."
msgstr ""

#: ../../_doc/developer/services/disposablevm-implementation.md:51
#: 61678d029d804ed4b74d2b6a16d1d6b5
msgid ""
"The actual passing of files between AppVM and a DisposableVM is implemented "
"via qubes rpc."
msgstr ""

#: ../../_doc/developer/services/disposablevm-implementation.md:53
#: 0688b65583074160bb85b935a507df0e
msgid "Validating the DisposableVM savefile"
msgstr ""

#: ../../_doc/developer/services/disposablevm-implementation.md:56
#: c026f4c3ba134ac78042a38b7f111945
msgid ""
"DisposableVM savefile contains references to template rootfs and to COW "
"files. The COW files are restored before each DisposableVM start, so they "
"cannot change. On the other hand, if templateVM is started, the template "
"rootfs will change, and it may not be coherent with the COW files."
msgstr ""

#: ../../_doc/developer/services/disposablevm-implementation.md:58
#: 7fae36de25af4f09b9f046dce214427b
msgid ""
"Therefore, the check for template rootfs modification time being older than "
"DisposableVM savefile modification time is required. It is done in "
"`qfilexchgd` daemon, just before restoring DisposableVM. If necessary, an "
"attempt is made to recreate the DisposableVM savefile, using the last "
"template used (or default template, if run for the first time) and the "
"default prerun script, residing at `/var/lib/qubes/vm-"
"templates/templatename/dispvm_prerun.sh`. Unfortunately, the prerun script "
"takes a lot of time to execute - therefore, after template rootfs "
"modification, the next DisposableVM creation can be longer by about 2.5 "
"minutes."
msgstr ""
