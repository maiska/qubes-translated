# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2021, test
# This file is distributed under the same license as the qubes-docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Curtis Baltimore <curtisbaltimore@protonmail.com>, 2021
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: qubes-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-12-15 16:25+0100\n"
"PO-Revision-Date: 2021-12-15 15:11+0000\n"
"Last-Translator: Curtis Baltimore <curtisbaltimore@protonmail.com>, 2021\n"
"Language-Team: German (https://www.transifex.com/otf/teams/56717/de/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: de\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"

#: ../../_doc/developer/services/qrexec.md:17 de562e2fa376495d931ce118082d6951
msgid ""
"(*This page is about qrexec v3. For qrexec v2, see [here](/doc/qrexec2/).*)"
msgstr ""

#: ../../_doc/developer/services/qrexec.md:19 2080ec2df7f64eb884e9c0bcf2a4995c
msgid ""
"The **qrexec framework** is used by core Qubes components to implement "
"communication between domains. Qubes domains are strictly isolated by "
"design. However, the OS needs a mechanism to allow the administrative domain"
" (dom0) to force command execution in another domain (VM). For instance, "
"when a user selects an application from the KDE menu, it should start in the"
" selected VM. Also, it is often useful to be able to pass "
"stdin/stdout/stderr from an application running in a VM to dom0 (and the "
"other way around). (For example, so that a VM can notify dom0 that there are"
" updates available for it). By default, Qubes allows VMs initiate such "
"communications in specific circumstances. The qrexec framework generalizes "
"this process by providing a remote procedure call (RPC) protocol for the "
"Qubes architecture. It allows users and developers to use and design secure "
"inter-VM tools."
msgstr ""

#: ../../_doc/developer/services/qrexec.md:29 d342a035ed514793992c835e314b4f20
msgid "Qrexec basics: architecture and examples"
msgstr ""

#: ../../_doc/developer/services/qrexec.md:31 1d6fad41b2df4f82a97b59f0371718fe
msgid ""
"Qrexec is built on top of *vchan*, a Xen library providing data links "
"between VMs. During domain startup , a process named `qrexec-daemon` is "
"started in dom0, and a process named `qrexec-agent` is started in the VM. "
"They are connected over a **vchan** channel. `qrexec-daemon` listens for "
"connections from a dom0 utility named `qrexec-client`. Let's say we want to "
"start a process (call it `VMprocess`) in a VM (`someVM`). Typically, the "
"first thing that a `qrexec-client` instance does is to send a request to the"
" `qrexec-daemon`, which in turn relays it to `qrexec-agent` running in "
"`someVM`. `qrexec-daemon` assigns unique vchan connection details and sends "
"them to both `qrexec-client` (in dom0) and `qrexec-agent` (in `someVM`). "
"`qrexec-client` starts a vchan server, which `qrexec-agent` then connects "
"to. Once this channel is established, stdin/stdout/stderr from the VMprocess"
" is passed between `qrexec-agent` and the `qrexec-client` process."
msgstr ""

#: ../../_doc/developer/services/qrexec.md:41 fff881ba0ccd403c9be1a8fb123b5d31
msgid "![qrexec basics diagram](/attachment/doc/qrexec3-basics.png)"
msgstr ""

#: ../../_doc/developer/services/qrexec.md:41 2c321eefd60e4774921beea714c1c162
msgid "qrexec basics diagram"
msgstr ""

#: ../../_doc/developer/services/qrexec.md:43 5447af3ef8ed4766834c76488c4ad71a
msgid ""
"The `qrexec-client` command is used to make connections to VMs from dom0. "
"For example, the following command creates an empty file called `hello-"
"world.txt` in the home folder of `someVM`:"
msgstr ""

#: ../../_doc/developer/services/qrexec.md:50 22b5df2d45c64c5f8a81c8995eb7db7c
msgid ""
"The string before the colon specifies what user to run the command as. The "
"`-e` flag tells `qrexec-client` to exit immediately after sending the "
"execution request and receiving a status code from `qrexec-agent` (whether "
"the process creation succeeded). With this option, no further data is passed"
" between the domains. By contrast, the following command demonstrates an "
"open channel between dom0 and someVM (in this case, a remote shell):"
msgstr ""

#: ../../_doc/developer/services/qrexec.md:59 3af8f58549714e07994f8dcaeba21cc8
msgid ""
"The `qvm-run` command is heavily based on `qrexec-client`. It also takes "
"care of additional activities, e.g. starting the domain if it is not up yet "
"and starting the GUI daemon. Thus, it is usually more convenient to use "
"`qvm-run`."
msgstr ""

#: ../../_doc/developer/services/qrexec.md:63 5b3544cacef541d3b16fca9235e90611
msgid ""
"There can be an almost arbitrary number of `qrexec-client` processes for a "
"given domain. The limiting factor is the number of available vchan channels,"
" which depends on the underlying hypervisor, as well the domain's OS."
msgstr ""

#: ../../_doc/developer/services/qrexec.md:66 4226f6673f8c4089ada8390a536c78b4
msgid ""
"For more details on the qrexec framework and protocol, see \"[Qubes RPC "
"internals](/doc/qrexec-internals).\""
msgstr ""

#: ../../_doc/developer/services/qrexec.md:68 d45a864fa58540c0bde97e11589ba8b1
msgid "Qubes RPC services"
msgstr ""

#: ../../_doc/developer/services/qrexec.md:70 4738b3c98ae44660a60066e59c793f45
msgid ""
"Some common tasks (like copying files between VMs) have an RPC-like "
"structure: a process in one VM (say, the file sender) needs to invoke and "
"send/receive data to some process in other VM (say, the file receiver). The "
"Qubes RPC framework was created to securely facilitate a range of such "
"actions."
msgstr ""

#: ../../_doc/developer/services/qrexec.md:73 7e84e3dc5dfd4791b114e1ad65c2c8b2
msgid ""
"Obviously, inter-VM communication must be tightly controlled to prevent one "
"VM from taking control of another, possibly more privileged, VM. Therefore "
"the design decision was made to pass all control communication via dom0, "
"that can enforce proper authorization. Then, it is natural to reuse the "
"already-existing qrexec framework."
msgstr ""

#: ../../_doc/developer/services/qrexec.md:77 41f79ad4890b46b38b7851bc92c4b427
msgid ""
"Also, note that bare qrexec provides `VM <-> dom0` connectivity, but the "
"command execution is always initiated by dom0. There are cases when VM needs"
" to invoke and send data to a command in dom0 (e.g. to pass information on "
"newly installed `.desktop` files). Thus, the framework allows dom0 to be the"
" RPC target as well."
msgstr ""

#: ../../_doc/developer/services/qrexec.md:81 6d68d00ac3534369813169f6e5f91cdd
msgid ""
"Thanks to the framework, RPC programs are very simple -- both RPC client and"
" server just use their stdin/stdout to pass data. The framework does all the"
" inner work to connect these processes to each other via `qrexec-daemon` and"
" `qrexec-agent`. Additionally, disposable VMs are tightly integrated -- RPC "
"to a DisposableVM is identical to RPC to a normal domain, all one needs is "
"to pass `@dispvm` as the remote domain name."
msgstr ""

#: ../../_doc/developer/services/qrexec.md:85 43dc93e8e39c444aa4ec2743bc78763d
msgid "Qubes RPC administration"
msgstr ""

#: ../../_doc/developer/services/qrexec.md:87 bd0cba2b88b94c9bbf5e3913d123ca23
msgid "Policy files"
msgstr ""

#: ../../_doc/developer/services/qrexec.md:89 983b9a15bd064fdfa128aeecc2cebbb3
msgid ""
"The dom0 directory `/etc/qubes-rpc/policy/` contains a file for each "
"available RPC action that a VM might call. Together the contents of these "
"files make up the RPC access policy database. Policies are defined in lines "
"with the following format:"
msgstr ""

#: ../../_doc/developer/services/qrexec.md:97 6c30b2e2af7147b1b8e0e3298c3663ad
msgid ""
"You can specify srcvm and destvm by name or by one of the reserved keywords "
"such as `@anyvm`, `@dispvm`, or `dom0`. (Of these three, only `@anyvm` "
"keyword makes sense in the srcvm field. Service calls from dom0 are "
"currently always allowed, and `@dispvm` means \"new VM created for this "
"particular request,\" so it is never a source of request.) Other methods "
"using *tags* and *types* are also available (and discussed below)."
msgstr ""

#: ../../_doc/developer/services/qrexec.md:102
#: b5365e625e2449d48c81fea215a81ad7
msgid ""
"Whenever a RPC request for an action is received, the domain checks the "
"first matching line of the relevant file in `/etc/qubes-rpc/policy/` to "
"determine access: whether to allow the request, what VM to redirect the "
"execution to, and what user account the program should run under. Note that "
"if the request is redirected (`target=` parameter), policy action remains "
"the same -- even if there is another rule which would otherwise deny such "
"request. If no policy rule is matched, the action is denied. If the policy "
"file does not exist, the user is prompted to create one. If there is still "
"no policy file after prompting, the action is denied."
msgstr ""

#: ../../_doc/developer/services/qrexec.md:109
#: 145de093571c4101810cbcc13fb46983
msgid ""
"In the target VM, the file `/etc/qubes-rpc/RPC_ACTION_NAME` must exist, "
"containing the file name of the program that will be invoked, or being that "
"program itself -- in which case it must have executable permission set "
"(`chmod +x`)."
msgstr ""

#: ../../_doc/developer/services/qrexec.md:111
#: 22e145c0d3e546e494c10faa4454c1cb
msgid "Making an RPC call"
msgstr ""

#: ../../_doc/developer/services/qrexec.md:113
#: 7e0e3feeeed7445ba42efbc1de803bc8
msgid "From outside of dom0, RPC calls take the following form:"
msgstr ""

#: ../../_doc/developer/services/qrexec.md:119
#: ae995287aff24c15b99caaa15df0ff2a
msgid "For example:"
msgstr "Zum Beispiel:"

#: ../../_doc/developer/services/qrexec.md:125
#: 2f48d790f49a4891af02214dfef8944d
msgid ""
"Note that only stdin/stdout is passed between RPC server and client -- "
"notably, no command line arguments are passed. By default, stderr of client "
"and server is logged in the syslog/journald of the VM where the process is "
"running."
msgstr ""

#: ../../_doc/developer/services/qrexec.md:128
#: 5f584313e9094a66800ac3491efbfceb
msgid ""
"It is also possible to call service without specific client program -- in "
"which case server stdin/out will be connected with the terminal:"
msgstr ""

#: ../../_doc/developer/services/qrexec.md:134
#: 7d053ff86b504ad5b1274c5496e3a6db
msgid "Specifying VMs: tags, types, targets, etc."
msgstr ""

#: ../../_doc/developer/services/qrexec.md:136
#: 4a9e97be3802423da89cb9d7bc5e611b
msgid ""
"There are severals methods for specifying source/target VMs in RPC policies."
msgstr ""

#: ../../_doc/developer/services/qrexec.md:138
#: 31f8949375064ee58c1f79e9f8b104e6
msgid "`@tag:some-tag` - meaning a VM with tag `some-tag`"
msgstr ""

#: ../../_doc/developer/services/qrexec.md:139
#: fe7617dbc21d48d3b37438439b5d10fb
msgid "`@type:type` - meaning a VM of `type` (like `AppVM`, `TemplateVM` etc)"
msgstr ""

#: ../../_doc/developer/services/qrexec.md:141
#: 9e97bc211dbe4490b40ac6709799e30b
msgid ""
"Target VM can be also specified as `@default`, which matches the case when "
"calling VM didn't specified any particular target (either by using "
"`@default` target, or empty target). For DisposableVMs, `@dispvm:DISP_VM` is"
" very similar to `@dispvm` but forces using a particular VM (`DISP_VM`) as a"
" base VM to be started as DisposableVM. For example:"
msgstr ""

#: ../../_doc/developer/services/qrexec.md:149
#: 8cd05a8d03744103a89f3ff12078612c
msgid ""
"Adding such policy itself will not force usage of this particular `DISP_VM` "
"- it will only allow it when specified by the caller. But `@dispvm:DISP_VM` "
"can also be used as target in request redirection, so _it is possible_ to "
"force particular `DISP_VM` usage, when caller didn't specify it:"
msgstr ""

#: ../../_doc/developer/services/qrexec.md:156
#: 24afa95c1ed24a958ccadb30f8318ff2
msgid ""
"Note that without redirection, this rule would allow using default "
"Disposable VM (`default_dispvm` VM property, which itself defaults to global"
" `default_dispvm` property). Also note that the request will be allowed "
"(`allow` action) even if there is no second rule allowing calls to "
"`@dispvm:anon-whonix-dvm`, or even if there is a rule explicitly denying it."
" This is because the redirection happens _after_ considering the action."
msgstr ""

#: ../../_doc/developer/services/qrexec.md:160
#: ac81210651674adfae59a36f8b6a6a62
msgid ""
"The policy confirmation dialog (`ask` action) allows the user to specify "
"target VM. User can choose from VMs that, according to policy, would lead to"
" `ask` or `allow` actions. It is not possible to select VM that policy would"
" deny. By default no VM is selected, even if the caller provided some, but "
"policy can specify default value using `default_target=` parameter. For "
"example:"
msgstr ""

#: ../../_doc/developer/services/qrexec.md:172
#: 9441860dc8dd4e33ab283ba9f81ef986
msgid ""
"The first rule allow call from `work-mail` to `work-archive`, without any "
"confirmation. The second rule will ask the user about calls from `work-mail`"
" VM to any VM with tag `work`. And the confirmation dialog will have `work-"
"files` VM chosen by default, regardless of the VM specified by the caller "
"(`work-mail` VM). The third rule allow the caller to not specify target VM "
"at all and let the user choose, still - from VMs with tag `work` (and `work-"
"archive`, regardless of tag), and with `work-files` as default."
msgstr ""

#: ../../_doc/developer/services/qrexec.md:177
#: e577cd5ddf32493f8527ca32bf99cfe1
msgid "RPC services and security"
msgstr ""

#: ../../_doc/developer/services/qrexec.md:179
#: 360b47d8fc9d414d9d631cff9119e48a
msgid ""
"Be very careful when coding and adding a new RPC service. Unless the offered"
" functionality equals full control over the target (it is the case with e.g."
" `qubes.VMShell` action), any vulnerability in an RPC server can be fatal to"
" Qubes security. On the other hand, this mechanism allows to delegate "
"processing of untrusted input to less privileged (or disposable) AppVMs, "
"thus wise usage of it increases security."
msgstr ""

#: ../../_doc/developer/services/qrexec.md:183
#: e73166f9277943ca9ead860f27f9c884
msgid ""
"For example, this command will run the `firefox` command in a DisposableVM "
"based on `work`:"
msgstr ""

#: ../../_doc/developer/services/qrexec.md:189
#: 1f7dc041444f4707901bb4ab6742a4b8
msgid "By contrast, consider this command:"
msgstr ""

#: ../../_doc/developer/services/qrexec.md:195
#: 1ec7ecd18484456896256bee99730425
msgid ""
"This will look for a `firefox.desktop` file in a standard location in a "
"DisposableVM based on `work`, then launch the application described by that "
"file. The practical difference is that the bare `qvm-run` command uses the "
"`qubes.VMShell` service, which allows you to run an arbitrary command with "
"arbitrary arguments, essentially providing full control over the target VM. "
"By contrast, the `qubes.StartApp` service allows you to run only "
"applications that are advertised in `/usr/share/applications` (or other "
"standard locations) *without* control over the arguments, so giving a VM "
"access to `qubes.StartApp` is much safer. While there isn't much practical "
"difference between the two commands above when starting an application from "
"dom0 in Qubes 4.0, there is a significant security risk when launching "
"applications from a domU (e.g., from a separate GUI domain). This is why "
"`qubes.StartApp` uses our standard `qrexec` argument grammar to strictly "
"filter the permissible grammar of the `Exec=` lines in `.desktop` files that"
" are passed from untrusted domUs to dom0, thereby protecting dom0 from "
"command injection by maliciously-crafted `.desktop` files."
msgstr ""

#: ../../_doc/developer/services/qrexec.md:201
#: 96138ec20bba4db1b056d1b1fb11dee9
msgid "Service policies with arguments"
msgstr ""

#: ../../_doc/developer/services/qrexec.md:203
#: 2d8c97cf739b4e96aa1a5ad246f149f3
msgid ""
"Sometimes a service name alone isn't enough to make reasonable qrexec "
"policy. One example of such a situation is [qrexec-based USB "
"passthrough](/doc/how-to-use-usb-devices/). Using just a service name would "
"make it difficult to express the policy \"allow access to devices X and Y, "
"but deny to all others.\" It isn't feasible to create a separate service for"
" every device: we would need to change the code in multiple files any time "
"we wanted to update the service."
msgstr ""

#: ../../_doc/developer/services/qrexec.md:208
#: ecb6c4c46b4547fba8aa00bd9de30ad1
msgid ""
"For this reason it is possible to specify a service argument, which will be "
"subject to a policy. A service argument can make service policies more fine-"
"grained. With arguments, it is easier to write more precise policies using "
"the \"allow\" and \"deny\" actions, instead of relying on the \"ask\" "
"method. (Writing too many \"ask\" policies offloads additional decisions to "
"the user. Generally, the fewer choices the user must make, the lower the "
"chance to make a mistake.)"
msgstr ""

#: ../../_doc/developer/services/qrexec.md:214
#: c5fd810acf0641d083d9bb5f717718b3
msgid ""
"Each specific argument that we want to use needs its own policy in dom0 at a"
" path like `/etc/qubes-rpc/policy/RPC_ACTION_NAME+ARGUMENT`. So for "
"instance, we might have policies called `test.Device`, `test.Device+device1`"
" and `test.Device+device2`. If the policy for the specific argument is not "
"set (that is, if no file exists for `RPC_ACTION_NAME+ARGUMENT`), then dom0 "
"uses the default policy with no argument for this service."
msgstr ""

#: ../../_doc/developer/services/qrexec.md:218
#: 40eb0b7dc00741ce969d0d90ce51b3c0
msgid ""
"When calling a service that takes an argument, just add the argument to the "
"service name separated with `+`."
msgstr ""

#: ../../_doc/developer/services/qrexec.md:224
#: 260cc6c3924f4f86933d9d7332e927e4
msgid ""
"The script will receive `ARGUMENT` as its argument. The argument will also "
"become available as the `QREXEC_SERVICE_ARGUMENT` environment variable. This"
" means it is possible to install a different script for a particular service"
" argument."
msgstr ""

#: ../../_doc/developer/services/qrexec.md:228
#: 3e24f24d36da42c793b191beaf196a22
msgid ""
"See [below](#rpc-service-with-argument-file-reader) for an example of an RPC"
" service using an argument."
msgstr ""

#: ../../_doc/developer/services/qrexec.md:232
#: b69fc77baf254d5b9c524ea2561c9608
msgid "Qubes RPC examples"
msgstr ""

#: ../../_doc/developer/services/qrexec.md:234
#: 1b9cab5a61d04cf48bd06bd92e195929
msgid ""
"To demonstrate some of the possibilities afforded by the qrexec framework, "
"here are two examples of custom RPC services."
msgstr ""

#: ../../_doc/developer/services/qrexec.md:236
#: 82cb0ada24be41b5ad85c3567952d030
msgid "Simple RPC service (addition)"
msgstr ""

#: ../../_doc/developer/services/qrexec.md:238
#: 7c10635e7b7d4986bf35df2866f816ff
msgid ""
"We can create an RPC service that adds two integers in a target domain (the "
"server, call it \"anotherVM\") and returns back the result to the invoker "
"(the client, \"someVM\"). In someVM, create a file with the following "
"contents and save it with the path `/usr/bin/our_test_add_client`:"
msgstr ""

#: ../../_doc/developer/services/qrexec.md:247
#: 036e1cb399024038b366df150acf5fb1
msgid ""
"Our server will be anotherVM at `/usr/bin/our_test_add_server`. The code for"
" this file is:"
msgstr ""

#: ../../_doc/developer/services/qrexec.md:256
#: d42617700f2b4f7c942ace402a236e29
msgid ""
"We'll need to create a service called `test.Add` with its own definition and"
" policy file in dom0. Now we need to define what the service does. In this "
"case, it should call our addition script. We define the service with a "
"symlink at `/etc/qubes-rpc/test.Add` pointing to our server script (the "
"script can be also placed directly in `/etc/qubes-rpc/test.Add` - make sure "
"the file has executable bit set!):"
msgstr ""

#: ../../_doc/developer/services/qrexec.md:265
#: c8875b901f1c4913a2fa43921b41d208
msgid ""
"The administrative domain will direct traffic based on the current RPC "
"policies. In dom0, create a file at `/etc/qubes-rpc/policy/test.Add` "
"containing the following:"
msgstr ""

#: ../../_doc/developer/services/qrexec.md:272
#: 829e8d5424ad4c40acfdf33a0a503eae
msgid "This will allow our client and server to communicate."
msgstr ""

#: ../../_doc/developer/services/qrexec.md:274
#: fea9b1e646364732be4828bc352b0d28
msgid ""
"Before we make the call, ensure that the client and server scripts have "
"executable permissions. Finally, invoke the RPC service."
msgstr ""

#: ../../_doc/developer/services/qrexec.md:281
#: 0de6b6923ba544328b52b96962743c28
msgid "We should get \"3\" as answer. (dom0 will ask for confirmation first.)"
msgstr ""

#: ../../_doc/developer/services/qrexec.md:284
#: 4ba2a1f0cf0a4c49bb160d4af17498ec
msgid ""
"**Note:** For a real world example of writing a qrexec service, see this "
"[blog post](https://blog.invisiblethings.org/2013/02/21/converting-"
"untrusted-pdfs-into-trusted.html)."
msgstr ""

#: ../../_doc/developer/services/qrexec.md:286
#: d68b01f9fa054f37b9b78c07c14a8e61
msgid "RPC service with argument (file reader)"
msgstr ""

#: ../../_doc/developer/services/qrexec.md:288
#: 76e790c509174f02b68d9371788c0eb1
msgid ""
"Here we create an RPC call that reads a specific file from a predefined "
"directory on the target. This example uses an [argument](#service-policies-"
"with-arguments) to the policy. In this example a simplified workflow will be"
" used. The service code is placed directly in the service definition file on"
" the target VM. No separate client script will be needed."
msgstr ""

#: ../../_doc/developer/services/qrexec.md:293
#: 6c089cc3b3c6414f92122258a97e1fba
msgid ""
"First, on your target VM, create two files in the home directory: "
"`testfile1` and `testfile2`. Have them contain two different \"Hello "
"world!\" lines."
msgstr ""

#: ../../_doc/developer/services/qrexec.md:296
#: a7fa926f48984242b53c7f9dec294731
msgid ""
"Next, we define the RPC service. On the target VM, place the code below at "
"`/etc/qubes-rpc/test.File`:"
msgstr ""

#: ../../_doc/developer/services/qrexec.md:309
#: 822c4177140240969d31e7d9ea0bed16
msgid ""
"Make sure the file is executable! (The service argument is already sanitized"
" by qrexec framework. It is guaranteed to not contain any spaces or slashes,"
" so there should be no need for additional path sanitization.)"
msgstr ""

#: ../../_doc/developer/services/qrexec.md:313
#: 7e29ae0043e84026956f5713b5ea7a5e
msgid ""
"Now we create three policy files in dom0. See the table below for details. "
"Replace \"source_vm1\" and others with the names of your own chosen domains."
msgstr ""

#: ../../_doc/developer/services/qrexec.md:317
#: e19f508d882e4dcb88b35688cf6649a5
msgid ""
"|------------------------------------------------------------------------| |"
" Path to file in dom0                      | Policy contents            | "
"|-------------------------------------------+----------------------------| |"
" /etc/qubes-rpc/policy/test.File           | @anyvm @anyvm deny         | | "
"/etc/qubes-rpc/policy/test.File+testfile1 | source_vm1 target_vm allow | | "
"/etc/qubes-rpc/policy/test.File+testfile2 | source_vm2 target_vm allow | "
"|------------------------------------------------------------------------|"
msgstr ""

#: ../../_doc/developer/services/qrexec.md:325
#: 1ff8756d42d841c89405811bf809a9a5
msgid ""
"With this done, we can run some tests. Invoke RPC from `source_vm1` via"
msgstr ""

#: ../../_doc/developer/services/qrexec.md:332
#: a8dd0a5c91064d6fb76c97f74315e5fe
msgid ""
"We should get the contents of `/home/user/testfile1` printed to the "
"terminal. Invoking the service from `source_vm2` should work the same, and "
"`testfile2` should also work."
msgstr ""

#: ../../_doc/developer/services/qrexec.md:340
#: 7059561c8f404ddbb5d0c17ca82e6678
msgid ""
"But when invoked with other arguments or from a different VM, it should be "
"denied."
msgstr ""
